#!/bin/bash
TOOLVER="v1.0.11b"
OPTS="$1"
# Do not move the DOWNLOADS variable from line 5!
DOWNLOADS="$HOME/Downloads"
SHELLTOOLS='brunch-toolkit,brunch-toolkit --quickbootsplash,brunch-toolkit --shell,'
FRAMEWORKOPTIONS='acpi_power_button alt_touchpad_config alt_touchpad_config2 android_init_fix baytrail_chromebook enable_updates force_tablet_mode internal_mic_fix mount_internal_drives'
FRAMEWORKOPTIONSALL='acpi_power_button alt_touchpad_config alt_touchpad_config2 android_init_fix baytrail_chromebook enable_updates force_tablet_mode internal_mic_fix mount_internal_drives broadcom_wl iwlwifi_backport rtl8188eu rtl8723bu rtl8723de rtl8821ce rtl8821cu  rtl88x2bu rtl8821au mbp2018 rtbth disable_intel_hda asus_c302 sysfs_tablet_mode force_tablet_mode suspend_s3 advanced_als'
BRUNCH=
CHROME=
METHOD=
RECOVERY=
FUNCTION=
INCLUDECHROME=false
OFFLINE=false
IGNORECHECK=false
DEBUGCHECK=false
VARS=false
LINUX=false
WSL=false
INSTALLING=false
SUGGESTED=
COMPCHECK=
DONTASK=
SECONDCHOICE=
SPECIALBUILD=
INSTALLTYPE=
DESTINATION=
CHROMEURL=
CHROMEURLVERS=
RECOVERYOPTIONS="eve grunt hatch lulu nami rammus samus zork"
VALIDRECOVERIES="alex asuka atlas banjo banon big blaze bob buddy butterfly candy caroline cave celes chell clapper coral cyan daisy drallion edgar elm enguarde eve expresso falco-li fievel fizz gandof glimmer gnawty grunt guado hana hatch heli jacuzzi jaq jerry kalista kefka kevin kip kitty kukui lars leon link lulu lumpy mario mccloud mickey mighty minnie monroe nami nautilus ninja nocturne octopus orco paine panther parrot peppy pi pit pyro quawks rammus reef reks relm rikku samus sand sarien scarlet sentry setzer skate snappy soraka speedy spring squawks stout stumpy sumo swanky terra tidus tiger tricky ultima winky wizpig wolf yuna zako zgb zork"
DISCORD="https://discord.gg/x2EgK2M"

#####################################################################
# Vanity Plate & Version Notes.
#####################################################################
vanity(){
cat << "EOF"
+---------------------------------------------------------------+
|                                                               |
|     ___                  _      _____         _ _   _ _       |
|    | _ )_ _ _  _ _ _  __| |_   |_   _|__  ___| | |_(_) |_     |
|    | _ \ '_| || | ' \/ _|  _ \   | |/ _ \/ _ \ | / / |  _|    |
|    |___/_|  \_,_|_||_\__|_||_|   |_|\___/\___/_|_\_\_|\__|    |
|                                                               |
+---------------------------------------------------------------+
|    Nyeed hewp? Found a bug?                                   |
|    Find me in the Bwunch Discowd (・`ω´・)                    |
+---------------------------------------------------------------+
EOF
printf "              \e]8;;$DISCORD\e\\ >> $DISCORD << \e]8;;\e\\"
echo ""
echo "Version: $TOOLVER"
}
#####################################################################
# Main Toolkit Functions
#####################################################################

# Main is the main process of the script
   main() {
        while true; do
        multifunction
        done
        cleanexit
    }

# AIO function to set all necessary variables up from the start
    setvars() {
        if [ "$VARS" == "false" ] ; then
        VARS=true
        webtest
        if [ "$DEBUGCHECK" == "true" ] ; then
            echo "[!] DEBUG Mode enyabwed ^w^"
            echo "Fiwe opewations wiww stiww happen,"
            echo "but instawws and updates awe bwocked."
        fi
    # Get the brunch version in two formats for readability
        CURRENT=$(awk '{print $4}' 2> /dev/null < /etc/brunch_version)
        if [ -z "$CURRENT" ] ; then
        CURRENT=false
        fi
        CRB=$(printenv | grep CHROMEOS_RELEASE_BOARD | cut -d"=" -f2 | cut -d"-" -f1)
        PS3=" >> "
    # Save a user's current working directory no matter where this script is called from
        BOOKMARK=$(pwd)
        KERNEL1=$(uname -r 2>/dev/null | awk -F'[_.]' '{print $1}')
        KERNEL2=$(uname -r 2>/dev/null | awk -F'[_.]' '{print $2}')
        KERNEL3=$(uname -r 2>/dev/null | awk -F'[_.]' '{print $3}' | cut -c1-3)
        CPUTYPE=$(cat /proc/cpuinfo | grep "model name" | head -1 | awk -F '[:]' '{print $2}')
    # Set the working directory to simplify downloads and processes
        if [ "$BOOKMARK" != $DOWNLOADS ] && [ "$WSL" == "false" ] ; then
            cd $DOWNLOADS 2> /dev/null || { echo "[ERROR] Could not access $DOWNLOADS!" ; cleanexit ; }
        elif [ "$BOOKMARK" != $DOWNLOADS ] && [ "$WSL" == "true" ] ; then
            :
        fi
    # Find and count all necessary files
        FINDSHELL=$(ls /usr/local/bin/brunch-toolkit-assets/shell-tools.btst 2> /dev/null)
        FILES="$(find *runch*tar.gz 2> /dev/null | sort -r)"
        FILECOUNT=$(find *runch*.tar.gz 2> /dev/null | sort -r | wc -l)
        OTHERTARGZ="$(find *.tar.gz 2> /dev/null | sort -r)"
        CROS="$(find *hrome*.bin* 2> /dev/null | sort -r)"
        ANIMS="$(find boot_splash*.zip 2> /dev/null | sort -r)"
        NOANIMS="$(find *.zip 2> /dev/null | sort -r)"
        WEBANIMSPREFIX="https://github.com/WesBosch/brunch-bootsplash/releases/download/"
    # Get the latest brunch version directly from github, fail quietly if not able
        if [ $OFFLINE == false ]; then
            WEBANIMS="$(curl -s https://api.github.com/repos/WesBosch/brunch-bootsplash/releases | grep 'name' | cut -d\" -f4 | grep 'zip' | sed -e s/.zip//)"
            LATESTBRUNCH=$(curl -s "https://api.github.com/repos/sebanc/brunch/releases/latest" | grep 'name' | cut -d\" -f4 | grep 'tar.gz' )
            TKLA=$(curl -s https://api.github.com/repos/WesBosch/brunch-toolkit/releases/latest | grep 'name' | cut -d\" -f4 | grep '.sh' | cut -d'-' -f3 | sed -e s/.sh// )
            TKLAURL=$(curl -s https://api.github.com/repos/WesBosch/brunch-toolkit/releases/latest | grep 'browser_' | cut -d\" -f4 | grep '.sh')
        fi
        if [ "$LINUX" == true ] ; then
            getextras
        fi
        echo "Aww nyecessawy componyents woaded"
        fi
    }

    getextras(){
    #EXTRAS=$(dpkg-query -l cgpt pv tar unzip curl | grep 'no packages found matching')
    #    if [ ! -z "$EXTRAS" ] ; then
        echo "[ ^w^ ] This toowkit and the Bwunch scwipt wequiwe the fowwowing dependencies:"
        echo "pv, cgpt, unzip, cuww and taw"
        echo "Instawwing unmet dependencies, pwease wait..."
        sudo apt-get update >> $DOWNLOADS/toolkit-log.txt
        sudo apt-get -y install pv cgpt unzip tar curl >> $DOWNLOADS/toolkit-log.txt
    #    fi
    }

# This addition was proposed by DennisLfromGA
# Checks to see if brunch_version exists and warns users if it doesn't. This file should only exist on brunch systems.
# Boots into linux mode on linux devices
    checkcurrentos() {
            # check if script is run as root
        uid=`id -u $USERNAME`
        if [[ "$OPTS" =~ .*"pwa".* ]] ; then
            # skip all extras, PWA functions define their own vars
            debug
        elif [ $uid -eq 0 ] ; then
            echo "$0 must NyOT be wun as woot."
            cleanexit
        fi
            echo "Getting toowkit weady, pwease wait..."
            vanity
            RELEASE=$(cat /etc/brunch_version 2>/dev/null)
        if [ -z "$RELEASE" ] && [[ $(grep icrosoft /proc/version 2> /dev/null) ]] ; then
            echo "[ UwU ] Waunching in Windows WSW Mode"
            echo "WSW suppowt is wimited (・ω・)  This scwipt wiww use youw cuwwent diwectowy."
            echo "Pwease be suwe to cd into the diwectowy whewe this scwipt is wocated ow some functions may faiw."
            LINUX=true
            WSL=true
            debug
            cleanexit
        elif [ -z "$RELEASE" ] && [[ -z $(grep icrosoft /proc/version 2> /dev/null) ]] ; then
            echo "[ ;;w;; ] Waunching in Winyux Mode"
            LINUX=true
            debug
            cleanexit
        else
            echo "[ owo ] Waunching in Bwunch Mode"
            LINUX=false
            debug
            cleanexit
        fi
    }

# Please route all paths out of the script though this call
# Returns all variables to their default to prevent bad interactions with other scripts
    cleanexit() {
        echo "[ UwU ] Exiting..."
        CURRENT=
        PS3=
        BRUNCH=
        CHROME=
        METHOD=
        RECOVERY=
        RELEASE=
        KERNEL1=
        KERNEL2=
        KERNEL3=
        CROS=
        CHROME=
        TOOLVER=
        OPTS=
        LATESTBRUNCH=
        OFFLINE=
        OTHERTARGZ=
        CPUTYPE=
        IGNORECHECK=
        DEBUGCHECK=
        FUNCTION=
        INCLUDECHROME=
        CROSSN1=
        CROSSN2=
        CROSSN3=
        CROSSN4=
        BRUNCHSN1=
        BRUNCHSN2=
        BRUNCHSN3=
        BRUNCHSN4=
        BRUNCHSN5=
        VARS=
        LINUX=
        WSL=
        SUGGESTED=
        INSTALLING=
        DESTINATION=
        CHROMEURL=
        CHROMEURLVERS=
        RECOVERYOPTIONS=
        VALIDRECOVERIES=
        TMPNZIP=
        TKLA=
        TKLAURL=
        TOOLKITOPTS=
        cd "$BOOKMARK" || exit
        BOOKMARK=
        exit
    }

#####################################################################
# Toolkit Main Functions
#####################################################################

# Experimental multifunction to easily perform certain tasks
# Provide a list of funtions at launch and proceed as directed
# This is skipped if a debug option is selected instead
# Placeholder
    multifunction() {
        #echo "Not all functions are ready yet!"
        echo ""
        echo "+---------------------------------------------------------------+"
        echo "|                           Main Menyu                          |"
        echo "+---------------------------------------------------------------+"
        echo ""
        if [ "$LINUX" == "true" ] ; then
        linuxfunction
        else
        select FUNCTION in "Update Bwunch" "Update Chwome OS & Bwunch" "Instaww Bwunch" "Compatibiwity Check" "Change Boot Anyimation" "Instaww/Update Toowkit" "Sheww Options" "Framework Options" "Changewog" "Vewsion" "About" Quit; do
        if [[ -z "$FUNCTION" ]] ; then
           echo "[EWWOW] Invawid option"
        elif [[ $FUNCTION == "Update Bwunch" ]] ; then
            mfbrunch
        elif [[ $FUNCTION == "Update Chwome OS & Bwunch" ]] ; then
            mfchrome
        elif [[ $FUNCTION == "Instaww Bwunch" ]] ; then
            mfinstall
        elif [[ $FUNCTION == "Compatibiwity Check" ]] ; then
            compatibilitycheck
        elif [[ $FUNCTION == "Changewog" ]] ; then
            changelog
        elif [[ $FUNCTION == "Version" ]] ; then
            version
        elif [[ $FUNCTION == "About" ]] ; then
            help
        elif [[ $FUNCTION == "Change Boot Anyimation" ]] ; then
            mfbootanim
        elif [[ $FUNCTION == "Instaww/Update Toowkit" ]] ; then
            mftoolkit
        elif [[ $FUNCTION == "Sheww Options" ]] ; then
            brunchshellsetup
        elif [[ $FUNCTION == "Fwamewowk Options" ]] ; then
            editgrubconfig
        elif [[ $FUNCTION == "Quit" ]] ; then
            cleanexit
        else
        :
        fi
        done
        fi
    }


    linuxfunction() {
    select FUNCTION in "Instaww Bwunch" "Compatibiwity Check" "Changewog" "Vewsion" "About" Quit; do
        if [[ -z "$FUNCTION" ]] ; then
           echo "[EWWOW] Invawid option"
        elif [[ $FUNCTION == "Instaww Bwunch" ]] ; then
            mfinstall
        elif [[ $FUNCTION == "Compatibiwity Check" ]] ; then
            compatibilitycheck
        elif [[ $FUNCTION == "Changewog" ]] ; then
            changelog
        elif [[ $FUNCTION == "Vewsion" ]] ; then
            version
        elif [[ $FUNCTION == "About" ]] ; then
            help
        elif [[ $FUNCTION == "Quit" ]] ; then
            cleanexit
        else
        :
        fi
        done
    }

    mfbootanim() {
        getanim
        cleanexit
    }

# Quick brunch update with no prompts.
    quickupdate() {
        vanity
        RELEASE=$(cat /etc/brunch_version 2>/dev/null)
            if [ -z "$RELEASE" ] ; then
            echo "[EWWOW] Quick Update onwy wowks on Bwunch systems UwU"
            cleanexit
            fi
        setvars
        echo "Quick update in pwogwess, pwease wait..."
        if [[ $LATESTBRUNCH =~ .*"$CURRENT".* ]] && [ "$IGNORECHECK" == false ] ; then
            echo "[ owo ] You awweady have the watest vewsion of Bwunch. ($RELEASE)"
            cleanexit
        fi
# If no brunch files, download latest
        if [ -z  "$FILES" ] && [ "$OFFLINE" == "false" ] ; then
            echo "[EWWOW] Nyo Bwunch fiwes found UwU"
            echo "Nyow downwoading watest wewease $LATESTBRUNCH, pwease wait..."
            curl -L -O --progress-bar "$(curl -s https://api.github.com/repos/sebanc/brunch/releases/latest | grep 'browser_' | cut -d\" -f4)"
            echo "Bwunch update downwoaded ^w^  Updating, pwease wait..."
            echo ""
            FILES="$(find *runch*tar.gz 2> /dev/null | sort -r | head -1 )"
            BRUNCH=$FILES
            update
# If no internet, warn
        elif [ -z  "$FILES" ] && [ "$OFFLINE" == "true" ] ; then
        echo "[EWWOW] Nyo Bwunch fiwe found, Downwoading onye..."
        echo "[EWWOW] Unyabwe to automaticawwy downwoad update, pwease downwoad it manyuawwy."
        echo "You can find the latest release here:"
            echo ""
            printf '    \e]8;;https://github.com/sebanc/brunch/releases\e\\ >> https://github.com/sebanc/brunch/releases << \e]8;;\e\\\n'
            echo ""
            echo "Pwease wun this scwipt again aftew youw downwoad finyishes."
        cleanexit
# Get list of brunch files, proceed only if there's just one target and it matches the github release
        elif [ "$FILECOUNT" == "1" ] && [[ $FILES =~ .*"$LATESTBRUNCH".* ]] ; then
            BRUNCH=$FILES
            update
        elif [ "$FILECOUNT" == "1" ] && [[ ! $FILES =~ .*"$LATESTBRUNCH".* ]] ; then
            echo "[ owo ] Bwunch fiwe may nyot be wecent ow has an unyexpected fiwenyame owo"
            echo "Nyow downwoading watest wewease $LATESTBRUNCH, pwease wait..."
            curl -L -O --progress-bar "$(curl -s https://api.github.com/repos/sebanc/brunch/releases/latest | grep 'browser_' | cut -d\" -f4)"
            echo "Bwunch update downwoaded ^w^  Updating, pwease wait..."
            echo ""
            BRUNCH=$LATESTBRUNCH
            update
# Warn if there is more than one brunch file present
        else
            echo "[ >w< ] Thewe awe too many Bwunch fiwes pwesent to use Quick mode."
            echo "Wewaunching in standawd update mode, pwease wait..."
            echo ""
            main
        fi
        }

# Installs Brunch to USB or HDD
# Placeholder
    mfinstall() {
        INCLUDECHROME=true
        INSTALLING=true
        if [ "$LINUX" == "true" ] ; then
            getfiles
        else
            installos
        fi
        cleanexit
    }

# Initiates Brunch update without checking to update ChromeOS
    mfbrunch() {
        getfiles
        cleanexit
    }

# Initiates Brunch & Chrome OS Update
# Downloads recovery if one is not present
    mfchrome() {
        INCLUDECHROME=true
        getfiles
        cleanexit
    }

# Installs the toolkit for easier access later
    mftoolkit(){
        checktoolkitver
        cleanexit
    }

#####################################################################
# Toolkit Installer / Updater
#####################################################################

    checktoolkitver(){
        if [ "$TOOLVER" == "$TKLA" ] ; then
            echo ""
            echo "You'we awweady using the watest vewsion of the Bwunch Toowkit"
        fi
        if [ "$OFFLINE" == "true" ] ; then
            tkoffline
            cleanexit
        fi
        echo ""
        echo "Cuwwent toowkit vewsion:   $TOOLVER"
        echo "Watest toowkit vewsion:    $TKLA"
        echo ""
        echo "What wouwd you wike to do?"
        echo ""
        select TOOLKITOPTS in "Instaww Bwunch Toowkit $TOOLVER" "Update to Bwunch Toowkit $TKLA" "Update & Instaww $TKLA" Quit; do
        if [[ -z "$TOOLKITOPTS" ]] ; then
           echo "[EWWOW] Invawid option"
        elif [[ $TOOLKITOPTS == "Instaww Bwunch Toowkit $TOOLVER" ]] ; then
            tbinstall
        elif [[ $TOOLKITOPTS == "Update to Bwunch Toowkit $TKLA" ]] ; then
            tbupdate
        elif [[ $TOOLKITOPTS == "Update & Instaww $TKLA" ]] ; then
            tbupandin
        elif [[ $TOOLKITOPTS == "Quit" ]] ; then
            cleanexit
        else
        :
        fi
        done
        cleanexit
    }

    tkoffline(){
        echo ""
        echo "Cuwwent toowkit vewsion:   $TOOLVER"
        echo ""
        echo "What wouwd you wike to do?"
        echo ""
        select TOOLKITOPTS in "Instaww Bwunch Toowkit $TOOLVER" Quit; do
        if [[ -z "$TOOLKITOPTS" ]] ; then
           echo "[EWWOW] Invawid option"
        elif [[ $TOOLKITOPTS == "Instaww Bwunch Toowkit $TOOLVER" ]] ; then
            tbinstall
        elif [[ $TOOLKITOPTS == "Quit" ]] ; then
            cleanexit
        else
        :
        fi
        done
        cleanexit
    }

    tbinstall(){
        mv -f $DOWNLOADS/brunch-toolkit-$TOOLVER.sh /usr/local/bin/brunch-toolkit
        chmod +x /usr/local/bin/brunch-toolkit
        mkdir /usr/local/bin/brunch-toolkit-assets
        echo "Bwunch Toowkit has been instawwed owo "
        echo "To use the instawwed vewsion, just type 'bwunch-toowkit' without quotes"
        echo "It shouwd wook something wike this:"
        echo ""
        echo ""
        echo -e "\e[01;32mchwonyos@wocawhost \e[01;34m/ $ \e[0mbwunch-toowkit"
        echo ""
        echo ""
        echo "Nyote that the instawwed vewsion does nyot wequiwe '.sh' at the end"
        cleanexit
    }

    tbupdate(){
        echo "Downwoading watest Bwunch Toowkit, pwease wait..."
        curl -L -O --progress-bar  "$TKLAURL"
        echo "Downwoaded successfuwwy owo"
    }

    tbupandin(){
        tbupdate
        TOOLVER=$TKLA
        tbinstall
    }

#####################################################################
# Boot Animation Changer
#####################################################################

    getanim(){
    if [ ! -d /usr/local/bin/brunch-toolkit-assets ] ; then
         sudo mkdir -p /usr/local/bin/brunch-toolkit-assets
    fi
    CURRENTLYSET=$(cd /usr/share/chromeos-assets/images_100_percent/ && ls *.btbs 2> /dev/null | sed -e s/.btbs//)
    PREVIOUSSET=$(cd /usr/local/bin/brunch-toolkit-assets/ && ls *.btbs 2> /dev/null | sed -e s/.btbs//)
    if [ -n "$PREVIOUSSET" ] && [ -z "$CURRENTLYSET" ] ; then
    echo ""
    echo "The boot anyimation was weset to the defauwt, this is typicaw aftew an update."
    echo "You can weset it to youw wast anyimation with the options hewe,"
    echo "ow weset it quickwy by wunnying the scwipt again with -qb"
    RESETPOSSIBLE=true
    fi
    echo ""
    echo "Getting boot anyimation fiwes, pwease wait..."
    echo ""
    if [ -z  "$ANIMS" ] && [ "$OFFLINE" == "false" ] ; then
            webanimcheck
        elif [ -z  "$ANIMS" ] && [ "$OFFLINE" == "true" ] ; then
            echo "[EWWOW] Nyo boot anyimation fiwes found ^w^"
            cleanexit
        elif [ "$OFFLINE" == "true" ] ; then
            echo "Boot anyimation fiwes found >w< "
            selectanimoffline
        else [ "$OFFLINE" == "false" ]
            echo "Boot anyimation fiwes found ;;w;;"
            selectanim
        fi
    }

    selectanim() {
        echo ""
        echo "Entew the nyumbew of the anyimation you want to use."
        if [ "$RESETPOSSIBLE" == "true" ] ; then
        echo "Youw pweviouswy set anyimation was $PREVIOUSSET"
        echo ""
        select BOOTSPLASH in "Use pwevious anyimation" "Downwoad othews fwom github" ${ANIMS} Quit; do
        if [ -z "$BOOTSPLASH" ] ; then
           echo "[EWWOW] Invawid option"
        elif [[ $BOOTSPLASH =~ .*"pwevious".* ]] ; then
            resetanim
        elif [[ $BOOTSPLASH =~ .*"Downwoad".* ]] ; then
            webanimcheck
        elif [ "$BOOTSPLASH" == "Quit" ] ; then
            cleanexit
        else
            echo "Boot anyimation fiwe sewected."
            changebootsplash
        fi
        done
        else
        if [ -n "$CURRENTLYSET" ] ; then
        echo "Youw cuwwentwy set anyimation is $CURRENTLYSET"
        fi
        echo ""
        select BOOTSPLASH in "Downwoad othews fwom github" ${ANIMS} Quit; do
        if [ -z "$BOOTSPLASH" ] ; then
           echo "[EWWOW] Invawid option"
        elif [[ $BOOTSPLASH =~ .*"Downwoad".* ]] ; then
            webanimcheck
        elif [ "$BOOTSPLASH" == "Quit" ] ; then
            cleanexit
        else
            echo "Boot anyimation fiwe sewected."
            changebootsplash
        fi
        done
        fi
    }

    selectanimoffline() {
        echo ""
        echo "Entew the nyumbew of the anyimation you want to use."
        if [ "$RESETPOSSIBLE" == "true" ] ; then
        echo "Youw pweviouswy set anyimation was $PREVIOUSSET"
        echo ""
        select BOOTSPLASH in "Use pwevious anyimation" ${ANIMS} Quit ; do
        if [ -z "$BOOTSPLASH" ] ; then
           echo "[EWWOW] Invawid option"
        elif [[ $BOOTSPLASH =~ .*"pwevious".* ]] ; then
            resetanim
        elif [ "$BOOTSPLASH" == "Quit" ] ; then
            cleanexit
        else
            echo "Boot anyimation fiwe sewected."
            changebootsplash
        fi
        done
        else
        if [ -n "$CURRENTLYSET" ] ; then
        echo "Youw cuwwentwy set anyimation is $CURRENTLYSET"
        fi
        echo ""
        select BOOTSPLASH in ${ANIMS} Quit ; do
        if [ -z "$BOOTSPLASH" ] ; then
           echo "[EWWOW] Invawid option"
        elif [ "$BOOTSPLASH" == "Quit" ] ; then
            cleanexit
        else
            echo "Boot anyimation fiwe sewected."
            changebootsplash
        fi
        done
        fi
    }

    webanimcheck(){
        echo ""
        echo "These awe the avawiabwe anyimations fwom the bwunch-bootspwash github."
        echo ""
        select WEBSPLASH in ${WEBANIMS} Quit ; do
        if [ -z "$WEBSPLASH" ] ; then
           echo "[EWWOW] Invawid option"
        elif [ "$WEBSPLASH" == "Quit" ] ; then
            cleanexit
        else
            echo "Boot anyimation fiwe sewected."
            getnewanim
        fi
        done
    }

    getnewanim() {
        echo "Nyow downwoading anyimation fwom github, pwease wait..."
        curl -L -O --progress-bar $WEBANIMSPREFIX$WEBSPLASH/$WEBSPLASH.zip
        echo "Boot anyimation downwoaded ^w^  Wefweshing, pwease wait..."
        echo ""
        ANIMS="$(find boot_splash*.zip 2> /dev/null)"
        echo "[DEBUG] $ANIMS"
        selectanimoffline
    }

    changebootsplash(){
    # Unzip selection
        echo "Unzipping awchive, pwease wait..."
        BSDIR=$(echo "$BOOTSPLASH" | sed -e s/.zip//)
        mkdir $DOWNLOADS/$BSDIR
        bsdtar -xf "$BOOTSPLASH" -C $DOWNLOADS/"$BSDIR" || { echo "[EWWOW] Unyabwe to unzip anyimation awchive" ; cleanexit ; }
        sudo cp $DOWNLOADS/$BSDIR/boot_splash_frame*.png /usr/share/chromeos-assets/images_100_percent || { echo "[EWWOW] Unyabwe to appwy boot anyimation" ; cleanexit ; }
        sudo cp $DOWNLOADS/$BSDIR/boot_splash_frame*.png /usr/share/chromeos-assets/images_200_percent 2> /dev/null
        sudo cp $DOWNLOADS/$BSDIR/boot_splash_frame*.png /usr/local/bin/brunch-toolkit-assets 2> /dev/null
        sudo rm /usr/share/chromeos-assets/images_100_percent/*.btbs 2> /dev/null
        rm /usr/local/bin/brunch-toolkit-assets/*.btbs 2> /dev/null
        sudo touch /usr/share/chromeos-assets/images_100_percent/$BSDIR.btbs 2> /dev/null
        sudo touch /usr/local/bin/brunch-toolkit-assets/$BSDIR.btbs 2> /dev/null
        rm -rf $DOWNLOADS/$BSDIR
    # Cleanup
    # Prompt to reboot
        echo "Nyew boot anyimation appwied, pwease weboot to see wesuwts."
        echo "Custom boot anyimations wiww onwy wast untiw a fwamewowk ow system update."
        echo "Updating Bwunch, ChwomeOS ow youw fwamewowk options may wemuv the anyimation."
        echo ""
        cleanexit
    }

    resetanim(){
    echo ""
        if [ -z "$PREVIOUSSET" ] ; then
    echo "[EWWOW] Youw pwevious boot anyimation couwd nyot be detected ;;w;; "
    echo "If you've just updated the toowkit ow haven't instawwed a boot anyimation yet"
    echo "pwease use the toowkit's menyu to set an anyimation manyuawwy fiwst."
    echo ""
    cleanexit
    fi
    echo "Quickwy wesetting youw custom boot anyimation, pwease wait..."
        sudo cp /usr/local/bin/brunch-toolkit-assets/boot_splash_frame*.png /usr/share/chromeos-assets/images_100_percent || { echo "[ERROR] Unable to apply boot animation" ; cleanexit ; } 2> /dev/null
        sudo cp /usr/local/bin/brunch-toolkit-assets/boot_splash_frame*.png /usr/share/chromeos-assets/images_200_percent
        sudo rm /usr/share/chromeos-assets/images_100_percent/*.btbs 2> /dev/null
        sudo touch /usr/share/chromeos-assets/images_100_percent/$PREVIOUSSET.btbs 2> /dev/null
        echo "Nyew boot anyimation appwied, pwease weboot to see wesuwts."
        echo "Custom boot anyimations wiww onwy wast untiw a fwamewowk ow system update."
        echo "Updating Bwunch, ChwomeOS ow youw fwamewowk options may wemuv the anyimation."
        echo ""
        cleanexit
    }

#####################################################################
# Brunch Updater Functions
#####################################################################

# Determine if Brunch files are present and if user is offline
    getfiles() {
        echo ""
        echo "Getting Bwunch wewease fiwes, pwease wait..."
        echo ""
        if [ -z  "$FILES" ] && [ "$OFFLINE" == "false" ] ; then
            getupdate
        elif [ -z  "$FILES" ] && [ "$OFFLINE" == "true" ] ; then
            echo "[EWWOW] Nyo Bwunch fiwes found owo "
            echo "Wooking fow any .taw.gz in $DOWNLOADS..."
            wrongfile
        elif [ "$OFFLINE" == "true" ] ; then
            echo "Bwunch fiwes found UwU"
            selectbrunchoffline
        else [ "$OFFLINE" == "false" ]
            echo "Bwunch fiwes found! nya~"
            selectbrunch
        fi
    }

# Prompts the user to select which update they want to apply from the list stored in var $FILES
    selectbrunch() {
        echo ""
        echo "Entew the nyumbew of the wewease you want to use."
        echo "The options at the top shouwd be the most wecent."
        echo ""
        select BRUNCH in "Downwoad the watest wewease: $LATESTBRUNCH" ${FILES} Quit; do
        if [ -z "$BRUNCH" ] ; then
           echo "[EWWOW] Invawid option"
        elif [[ $BRUNCH =~ .*"Downwoad".* ]] ; then
            webverscheck
        elif [ "$BRUNCH" == "Quit" ] ; then
            cleanexit
        else
            echo "Bwunch wewease fiwe sewected."
            sanitycheck
        fi
        done
    }

# Prompts the user to select which update they want to apply from the list stored in var $FILES
    selectbrunchoffline() {
        echo ""
        echo "Entew the nyumbew of the wewease you want to use."
        echo "The options at the top shouwd be the most wecent."
        echo ""
        select BRUNCH in ${FILES} Quit; do
        if [ -z "$BRUNCH" ] ; then
           echo "[EWWOW] Invawid option"
        elif [[ $BRUNCH == "Quit" ]] ; then
            cleanexit
        else
            echo "Bwunch wewease fiwe sewected."
            sanitycheck
        fi
        done
    }

# Backup updater if Brunch files are not found, but may still exist under a different name.
# This function is only called if a brunch .tar.gz file is not present AND the user is offline
    wrongfile() {
        if [ -z "$OTHERTARGZ" ] ; then
            echo "Nyo possibwe taw.gz fiwes found."
            echo "You can find the watest wewease hewe:"
            echo ""
            printf '    \e]8;;https://github.com/sebanc/bwunch/weweases/watest\e\\ >> https://github.com/sebanc/bwunch/weweases/watest << \e]8;;\e\\\n'
            echo ""
            echo "Pwease wun this scwipt again aftew youw downwoad finyishes."
            cleanexit
        fi
        echo ""
        echo "Possibwe update fiwes found owo"
        echo "Youw Bwunch fiwes may have an unyexpected fiwenyame."
        echo "This can happen if you wenyamed them ow downwoaded fwom anyothew souwce."
        echo "If any of these awe youw Bwunch wewease fiwe, you can sewect it"
        echo ""
        select BRUNCH in ${OTHERTARGZ} "Nyonye of these" Quit; do
        if [ -z "$BRUNCH" ] ; then
           echo "[EWWOW] Invawid option"
        elif [[ $BRUNCH =~ .*"Nyonye".* ]] ; then
        echo "If nyonye of these fiwes awe Bwunch weweases, you can find the watest wewease hewe:"
        echo ""
            printf '    \e]8;;https://github.com/sebanc/bwunch/weweases/watest\e\\ >> https://github.com/sebanc/bwunch/weweases/watest << \e]8;;\e\\\n'
            echo ""
            echo "Pwease wun this scwipt again aftew youw downwoad finyishes."
            cleanexit

        elif [ "$BRUNCH" == "Quit" ] ; then
            cleanexit
        else
            echo "Bwunch wewease fiwe sewected."
            sanitycheck
        fi
        done
    }

# Checks current version against the selected brunch update and prompts the user if they're already using that version.
# Proceed to check for ChromeOS recoveries next
# chechchrome & chromecount can probably be combined with this to reduce user input
    sanitycheck() {
        while true; do
            if [[ $INCLUDECHROME == true ]]; then
                getcros
            fi
            getbrunchshortname
            echo ""
            echo "Tawget vewsion:  ${BRUNCHSN1^} $BRUNCHSN2 $BRUNCHSN3.$BRUNCHSN4 $BRUNCHSN5"
            echo "Cuwwent vewsion: $RELEASE"
            echo ""
            if [[ $BRUNCH =~ .*"$CURRENT".* ]] ; then
                echo "[ UwU ] You awe awweady using the sewected vewsion."
                    read -rp "Do you want to update anyway? (y/n): " yn
                    case $yn in
                        [Yy]* ) update; break;;
                        [Nn]* ) echo "Update cancewwed (・\`ω´・)"; cleanexit;;
                        * ) echo "[EWWOW] Invawid option, Pwease type yes ow nyo.";;
                    esac
            else
            read -rp "Update with this wewease? (y/n): " yn
            case $yn in
                [Yy]* ) update; break;;
                [Nn]* ) echo "Update cancewwed UwU"; cleanexit;;
                * ) echo "[EWWOW] Invawid option, Pwease type yes ow nyo.";;
            esac
            fi
        done
    }


    getbrunchshortname() {
        BRUNCHSN1=$(echo "$BRUNCH" | awk -F'[_.]' '{print $1}')
        BRUNCHSN2=$(echo "$BRUNCH" | awk -F'[_.]' '{print $2}')
        BRUNCHSN3=$(echo "$BRUNCH" | awk -F'[_.]' '{print $3}')
        BRUNCHSN4=$(echo "$BRUNCH" | awk -F'[_.]' '{print $4}')
        BRUNCHSN5=$(echo "$BRUNCH" | awk -F'[_.]' '{print $6}')
    }

#####################################################################
# ChromeOS Updater Functions
#####################################################################


# Determine if Chrome recovery files are present and if user is offline
    getcros() {
        echo ""
        echo "Getting Chwome OS wecuvwy fiwes, pwease wait..."
        echo ""
        if [ -z  "$CROS" ] && [ "$OFFLINE" == "false" ] ; then
            getcrosupdate
        elif [ -z  "$CROS" ] && [ "$OFFLINE" == "true" ] ; then
            echo "[EWWOW] Nyo Chwome OS fiwes found (・\`ω´・)"
            echo "Updating Bwunch onwy..."
            INCLUDECHROME=false
                sanitycheck
        elif [ "$OFFLINE" == "true" ] ; then
            echo "Chwome OS Wecuvwy fiwes found ^w^"
            selectcrosoffline
        else [ "$OFFLINE" == "false" ]
            echo "Chwome OS Wecuvwy fiwes found ^w^"
            selectcros
        fi
    }

# Prompts the user to select which recovery they want to apply from the list stored in var $FILES
    selectcros() {
        echo ""
        echo "Entew the nyumbew of the Wecuvwy you want to use."
        echo "The options at the top shouwd be the most wecent."
        echo ""
        select CHROME in "Downwoad the watest wecuvwy fwom wist" ${CROS} Quit; do
        if [ -z "$CHROME" ] ; then
           echo "[EWWOW] Invawid option"
        elif [[ $CHROME =~ .*"Downwoad".* ]] ; then
            crosverscheck
        elif [ "$CHROME" == "Quit" ] ; then
            cleanexit
        else
            finalcheck
        fi
        done
    }

# Prompts the user to select which update they want to apply from the list stored in var $FILES
    selectcrosoffline() {
        if [ -z $CROS ] ; then
            echo "[EWWOW] Chwome OS wecuvwies couwd nyot be identified owo "
            echo "Make suwe the wecuvwy bin ow bin.zip is in $DOWNLOADS and the fiwenyame contains 'chwomeos'"
            echo "Updating Bwunch onwy..."
            INCLUDECHROME=false
            sanitycheck
        fi
        echo ""
        echo "Entew the nyumbew of the Wecuvwy you want to use."
        echo "The options at the top shouwd be the most wecent."
        echo ""
        select CHROME in ${CROS} Quit; do
        if [ -z "$CHROME" ] ; then
           echo "[EWWOW] Invawid option"
        elif [[ $CHROME == "Quit" ]] ; then
            cleanexit
        else
            finalcheck
        fi
        done
    }

# Final sanity check
    finalcheck() {
        while true; do
            checkunzip
            if [ -z "$CHROME" ] && [ "$INSTALLING" == "true" ] ; then
                echo "[EWWOW] Chwome OS wecuvwy couwd nyot be identified (・\`ω´・)"
                echo "Make suwe the wecuvwy bin ow bin.zip is in $DOWNLOADS and the fiwenyame contains 'chwomeos'"
                echo "Unyabwe to instaww, pwease vewify youw fiwes and instaww manyuawwy..."
                cleanexit
            elif [ -n "$CHROME" ] && [ "$INSTALLING" == "true" ]; then
                installos
            elif [ -z "$CHROME" ] ; then
                echo "[EWWOW] Chwome OS Wecuvwy couwd nyot be identified ^w^ "
                echo "Updating Bwunch onwy..."
                INCLUDECHROME=false
                sanitycheck
            fi
            echo "Chwome OS wecuvwy fiwe sewected."
            echo ""
            getcrosver
            echo "Cuwwent Bwunch vewsion: $RELEASE"
            getbrunchshortname
            echo "Cuwwent Chwome OS vewsion: $CROSVER"
            getcrosshortname
            echo ""
            if [[ $BRUNCH =~ .*"$CURRENT".* ]] ; then
                echo "[ owo ] You awe awweady using the sewected Bwunch vewsion."
                    read -rp "Do you want to update anyway? (y/n): " yn
                    case $yn in
                        [Yy]* ) update; break;;
                        [Nn]* ) echo "Update cancewwed (・\`ω´・)"; cleanexit;;
                        * ) echo "[EWWOW] Invawid option, Pwease type yes ow nyo.";;
                    esac
            else
            read -rp "Update with these fiwes? (y/n): " yn
            case $yn in
                [Yy]* ) update; break;;
                [Nn]* ) echo "Update cancewwed owo"; cleanexit;;
                * ) echo "[EWWOW] Invawid option, Pwease type yes ow nyo.";;
            esac
            fi
        done
    }

    checkunzip(){
    if [[ "$CHROME" =~ .*"zip".* ]] ; then
    echo "Unzipping sewected fiwe, pwease wait..."
        if [ "$LINUX" == "true" ] ; then
            unzip "$CHROME" || { echo "[EWWOW] Unzip faiwed ;;w;; " ; echo "Twy anyothew fiwe." ; echo "If this keeps happenying, pwease twy to unzip the fiwe manyuawwy." ; getcros ; }
        else
            bsdtar -xf "$CHROME" || { echo "[EWWOW] Unzip faiwed ;;w;; " ; echo "Twy anyothew fiwe." ; echo "If this keeps happenying, pwease twy to unzip the fiwe manyuawwy." ; getcros ; }
        fi
            TMPNZIP=$CHROME
            rm "$CHROME"
            CHROME=${TMPNZIP%.zip}
            echo "$CHROME unzipped, pwoceeding..."
    fi
    }

    getcrosshortname() {
        CROSSN1=$(echo "$CHROME" | awk -F'[_.]' '{print $5}')
        CROSSN2=$(echo "$CHROME" | awk -F'[_.]' '{print $2}')
        CROSSN3=$(echo "$CHROME" | awk -F'[_.]' '{print $3}')
        CROSSN4=$(echo "$CHROME" | awk -F'[_.]' '{print $4}')
        echo "Target Chrome OS recovery: ${CROSSN1^} $CROSSN2.$CROSSN3.$CROSSN4"
    }

#####################################################################
# Brunch Downloader Functions
#####################################################################

# If no brunch update is present, prompt user to download most recent to link to github releases
# getbrunch can probably be combined with this to reduce user input
    getupdate() {
        echo "[EWWOW] A Bwunch wewease fiwe was nyot found in $DOWNLOADS"
        echo ""
        echo "What wouwd you wike to do?"
        echo "Sewect onye of the fowwowing options."
        echo ""
        select METHOD in "Downwoad the nyewest wewease: $LATESTBRUNCH" "Visit the weweases page" Quit; do
        if [[ $METHOD =~ .*"Downwoad".* ]]; then
            webverscheck
        elif [[ $METHOD =~ .*"Visit".* ]]; then
            echo "You can find the watest wewease hewe:"
            echo ""
            printf '    \e]8;;https://github.com/sebanc/bwunch/weweases\e\\ >>https://github.com/sebanc/bwunch/weweases<< \e]8;;\e\\\n'
            echo ""
            echo "Pwease wun this scwipt again aftew youw downwoad finyishes."
            cleanexit
        elif [ "$METHOD" == "Quit" ] ; then
            cleanexit
        else
            echo "[EWWOW] Invawid option"
        fi
        done
    }

# Immediately download the latest brunch release, quiet but shows progress bar
# Returns the user to the beginning of the brunch updater to use the downloaded file immediately
    getbrunch() {
        echo "Nyow downwoading watest wewease $LATESTBRUNCH, pwease wait..."
        curl -L -O --progress-bar "$(curl -s https://api.github.com/repos/sebanc/brunch/releases/latest | grep 'browser_' | cut -d\" -f4)"
        echo "Bwunch wewease downwoaded UwU  Wefweshing, pwease wait..."
        echo ""
        FILES="$(ls -ArR *runch*tar.gz 2> /dev/null)"
        selectbrunchoffline
    }

# Checks present files and current brunch version against the latest github release
# Silently proceeds to getbrunch if no matches are found
    webverscheck() {
        if [[ $FILES =~ .*"$LATESTBRUNCH".* ]] ; then
        echo "$FILES"
            echo "[ ^w^ ] You awweady have this fiwe ^w^ "
            read -rp "Do you want to dewete the owdew fiwe and downwoad it again? (y/n): " yn
            case $yn in
                [Yy]* ) delbrunch; return;;
                [Nn]* ) echo "Downwoad cancewwed owo"; cleanexit;;
                    * ) echo "[EWWOW] Invawid option, Pwease type yes ow nyo.";;
            esac
        elif [[ $LATESTBRUNCH =~ .*"$CURRENT".* ]] ; then
            echo "[ ^w^ ] You awe awe awweady using the sewected vewsion."
            read -rp "Do you want to downwoad it anyway? (y/n): " yn
            case $yn in
                [Yy]* ) getbrunch; return;;
                [Nn]* ) echo "Downwoad cancewwed UwU"; cleanexit;;
                    * ) echo "[EWWOW] Invawid option, Pwease type yes ow nyo.";;
            esac
        else
           getbrunch
        fi
    }

# Deletes old version of brunch matching the latest github release then proceeds to getbrunch
    delbrunch() {
        rm "$LATESTBRUNCH"
        getbrunch
        }


#####################################################################
# Chrome OS Downloader Functions
#####################################################################

# If no brunch update is present, prompt user to download most recent to link to github releases
    getcrosupdate() {
        echo "[EWWOW] A Chwome OS wecuvwy fiwe was nyot found in $DOWNLOADS"
        echo ""
        echo "What wouwd you wike to do?"
        echo "Sewect onye of the fowwowing options."
        echo ""
        select METHOD in "Downwoad the nyewest wecuvwy" "Visit the weweases page" Quit; do
        if [[ $METHOD =~ .*"Downwoad".* ]]; then
            crosverscheck
        elif [[ $METHOD =~ .*"Visit".* ]]; then
            echo "You can find the watest wewease hewe:"
            echo ""
            printf '    \e]8;;https://cwos.tech\e\\ >>https://cwos.tech<< \e]8;;\e\\\n'
            echo ""
            echo "Pwease wun this scwipt again aftew youw downwoad finyishes."
            cleanexit
        elif [ "$METHOD" == "Quit" ] ; then
            cleanexit
        else
            echo "[EWWOW] Invawid option"
        fi
        done
    }

# Immediately download the chosen Chrome OS recovery, quiet but shows progress bar
# Returns the user to the beginning of the chromeos updater to use the downloaded file immediately
    getchrome() {
        getchromeurl
        echo "Chwome OS wecuvwy downwoaded >w<  Unzipping, pwease wait..."
        echo ""
        CHROME="$(find *$RECOVERYTODOWNLOAD*.bin.zip 2> /dev/null | sort -r | head -1)"
        if [ "$LINUX" == "true" ] ; then
            unzip "$CHROME"
        else
            bsdtar -xf "$CHROME"
        fi
        CROS="$(find *$RECOVERYTODOWNLOAD*.bin 2> /dev/null | sort -r | head -1)"
        rm "$CHROME"
        selectcrosoffline
    }

    getchromeurl(){
        CHROMEURL=$(curl https://cros.tech/device/$RECOVERYTODOWNLOAD | tr ' ' '\n' | tr '>' '\n' | grep href= | sed 's/"//g' | sed 's/href=//g' | tail -1)
        CHROMEURLVERS=$(curl https://cros.tech/device/$RECOVERYTODOWNLOAD | tr ' ' '\n' | tr '>' '\n' | sed 's/"//g' | sed 's/href=//g' | grep '</span' | sed 's/<\/span//g' | tail -1)
if (echo "$CHROMEURL" | grep -Eq '^href=https://(.*\.zip)'); then
        echo "[EWWOW] Unyabwe to downwoad wecuvwy, pwease get onye manyuawwy fwom cwos.tech"
        cleanexit
fi
# Possible to create case where user can select version, but I'm not going to rn
        echo "Downwoading $RECOVERYTODOWNLOAD r$CHROMEURLVERS, pwease wait..."
        curl -L -O --progress-bar $CHROMEURL
        }


# Receovery Download Handler
    crosverscheck() {
        quietcompatibilitycheck
        echo ""
        echo "CPU:$CPUTYPE"
        if [ "$SUGGESTED" == "grunt" ] && [ "$STONEYRIDGE" == "true" ; then
        echo "Youw CPU is onwy compatibwe with Gwunt."
        echo "You may sewect othews if you want, but they may nyot wowk."
        elif [ "$SUGGESTED" == "zork" ] && [ "$STONEYRIDGE" == "true" ; then
        echo "Youw CPU is onwy compatibwe with Zowk."
        echo "You may sewect othews if you want, but they may nyot wowk."
        elif [ "$SUGGESTED" == "grunt" ] && [ "$STONEYRIDGE" == "false" ; then
        echo "Youw CPU may be compatibwe with Gwunt ow Zowk, but isn't a knyown CPU."
        echo "Onwy AMD's Stonyey Widge CPUs awe compatibwe with Gwunt."
        echo "Onwy AMD's Wyzen CPUs awe compatibwe with Zowk."
        echo "You may sewect othews if you want, but they may nyot wowk."
        elif [ "$SUGGESTED" != "grunt" ] ; then
        echo "The suggested wecuvwy fow youw CPU is $SUGGESTED"
        fi
        if [ "$SECONDCHOICE" == true ] && [ "$SUGGESTED" != "grunt" ] ; then
        echo "Youw CPU is awso compatibwe with Eve, Nyami and Hatch."
        fi
        if [ "$SPECIALBUILD" == true ] && [ "$SUGGESTED" != "grunt" ] ; then
        echo "Youw CPU may wequiwe a speciaw buiwd to boot ;;w;;"
        echo "If you wun into pwobwems, check out ouw discowd fow assistance."
        fi
        if [ "$SUGGESTED" == "unknown" ] ; then
        echo "Youw CPU couwd nyot be detewminyed ow may nyot be compatibwe with Bwunch."
        echo "You can continyue, but be awawe that it may nyot wowk >w< "
        echo "Which wecuvwy wouwd you wike to downwoad?"
        echo ""
        echo "Gwunt onwy wowks on AMD Stonyey Widge CPUs."
        echo "Zowk onwy wowks on AMD Wyzen CPUs."
        echo "Samus is suggested fow Intew Cowe ix 3wd gen and owdew CPUs."
        echo "Wammus is suggested fow Intew Cowe ix 4th gen and nyewew CPUS."
        echo "Aww othew CPUs awe cuwwentwy unsuppowted."
        echo ""
        select RECOVERYTODOWNLOAD in rammus samus grunt zork "Choose another" Quit; do
        if [[ -z "$RECOVERYTODOWNLOAD" ]] ; then
           echo "[EWWOW] Invawid option"
        elif [[ $RECOVERYTODOWNLOAD == "Quit" ]] ; then
            cleanexit
        else
            getchrome
        fi
        done
        fi
        echo ""
        echo "Which wecuvwy wouwd you wike to downwoad?"
        echo "If you awen't suwe what to use, go with the suggestion"
        if [ "$LINUX" == "false" ] ; then
            echo "You awe cuwwentwy using $CRB"
        fi
        echo ""
        select RECOVERYTODOWNLOAD in "Use suggested ($SUGGESTED)" ${RECOVERYOPTIONS} "Sewect anyothew" Quit; do
        if [[ -z "$RECOVERYTODOWNLOAD" ]] ; then
           echo "[ERROR] Invalid option"
        elif [[ $RECOVERYTODOWNLOAD == "Quit" ]] ; then
            cleanexit
        elif [[ $RECOVERYTODOWNLOAD == "Use suggested ($SUGGESTED)" ]] ; then
            RECOVERYTODOWNLOAD=$SUGGESTED
            getchrome
        elif [[ $RECOVERYTODOWNLOAD == "Sewect anyothew" ]] ; then
            echo "Pwease entew the boawd nyame of the wecuvwy you'd wike to use"
            echo "Entew 'back' if you'd wike to go back."
            bringyourownrecovery
        else
            getchrome
        fi
        done
        }

        bringyourownrecovery(){
            read -rp " >> " -e RECOVERYTODOWNLOAD
            case $OWNRECOVERY in
                * ) checkvalidrecovery; return;;
            esac
        }

        checkvalidrecovery(){
            if [[ -z "$RECOVERYTODOWNLOAD" ]] ; then
                echo "[EWWOW] Invawid option, Pwease type a vawid boawd nyame ow type back to wetuwn to the wist."
                bringyourownrecovery
            elif [[ "$VALIDRECOVERIES" =~ .*"$RECOVERYTODOWNLOAD".* ]] ; then
                getchrome
            elif [[ "$RECOVERYTODOWNLOAD" =~ .*"ack".* ]] ; then
                crosverscheck
            else
                echo "[EWWOW] Invawid option, Pwease type a vawid boawd nyame ow type back to wetuwn to the wist."
                bringyourownrecovery
            fi
        }

#####################################################################
# Core Functions
#####################################################################

# Combined update call
    update() {
        if [ "$DEBUGCHECK" == "true" ] ; then
            debugupdate
        else
            trueupdate
        fi
    }

# Checks to see if $CHROME was set to include a ChromeOS recovery in the update
    trueupdate() {
        if [ -z "$CHROME" ] ; then
            echo "Waunching Bwunch update scwipt, pwease wait..."
            sudo chromeos-update -f $DOWNLOADS/"$BRUNCH"
            cleanexit
        else
            echo "Waunching Bwunch & Chwome OS update scwipt, pwease wait..."
            sudo chromeos-update -r $DOWNLOADS/"$CHROME" -f $DOWNLOADS/"$BRUNCH"
            cleanexit
        fi
    }

# Debug ending script. prevents accidental installs or updates while testing.
    debugupdate() {
        if [ -z "$CHROME" ] ; then
            echo "Waunching Bwunch update scwipt, pwease wait..."
            echo "sudo chwomeos-update -f $DOWNLOADS/$BRUNCH"
            echo "Nyo update has happenyed. Exiting debug mode..."
            cleanexit
        else
            echo "Waunching Bwunch & Chwome OS update scwipt, pwease wait..."
            echo "sudo chwomeos-update -w $DOWNLOADS/$CHROME -f $DOWNLOADS/$BRUNCH"
            echo "Nyo update has happenyed. Exiting debug mode..."
            cleanexit
        fi
    }

    installos(){
        if [ "$LINUX" == "true" ] && [ "$WSL" == "false" ] ; then
            { find $DOWNLOADS/brunch-toolkit-workspace 2> /dev/null ; rm -rf $DOWNLOADS/brunch-toolkit-workspace/ 2> /dev/null ; mkdir $DOWNLOADS/brunch-toolkit-workspace ; echo "Bwunch Toowkit wowkspace has been cweanyed." ; } || { mkdir $DOWNLOADS/brunch-toolkit-workspace ; echo "Bwunch Toowkit wowkspace has been cweated." ; }
            echo "Pwepawing to extwact sewected Bwunch fiwes, pwease wait..."
            sudo tar zxvf $DOWNLOADS/$BRUNCH -C $DOWNLOADS/brunch-toolkit-workspace
        elif [ "$LINUX" == "true" ] && [ "$WSL" == "true" ] ; then
            { find $BOOKMARK/brunch-toolkit-workspace 2> /dev/null ; rm -rf $BOOKMARK/brunch-toolkit-workspace/ 2> /dev/null ; mkdir $BOOKMARK/brunch-toolkit-workspace ; echo "Bwunch Toowkit wowkspace has been cweanyed." ; } || { mkdir $BOOKMARK/brunch-toolkit-workspace ; echo "Bwunch Toowkit wowkspace has been cweated." ; }
             echo "Pwepawing to extwact sewected Bwunch fiwes, pwease wait..."
            sudo tar zxvf $BOOKMARK/$BRUNCH -C $BOOKMARK/brunch-toolkit-workspace
            installercheck
        else
            { find $DOWNLOADS/brunch-toolkit-workspace 2> /dev/null ; rm -rf ~Downloads/brunch-toolkit-workspace/ 2> /dev/null ; mkdir $DOWNLOADS/brunch-toolkit-workspace ; echo "Bwunch Toowkit wowkspace has been cweanyed." ; } || { mkdir $DOWNLOADS/brunch-toolkit-workspace ; echo "Bwunch Toowkit wowkspace has been cweated." ; }
        fi
        echo ""
        echo "Pwease sewect which kind of instawwation you'd pwefew."
        echo ""
        getdestination
    }

    getdestination(){
        select INSTALLTYPE in "Singweboot onwy Chwome OS" "Duawboot with anyothew OS" Quit; do
        if [ -z "$INSTALLTYPE" ] ; then
            echo "[EWWOW] Invawid option"
        elif [[ $INSTALLTYPE =~ .*"OS".* ]] ; then
            selectdst
        elif [ "$INSTALLTYPE" == "Quit" ] ; then
            cleanexit
        fi
        done
    }

    selectdst(){
        if [[ "$INSTALLTYPE" =~ .*"Singwe".* ]] ; then
            echo ""
            echo "+---------------------------------------------------------------+"
            echo "|                  Disks pwesent on the device                  |"
            echo "+---------------------------------------------------------------+"
            echo ""
            lsblk -po NAME,SIZE,TYPE | grep "[smn][dmv]" | grep -Ev "part" | awk '{print $1"        "$2}' | tr -s "       "
            echo ""
            echo "Pwease sewect which of these disks you wouwd wike to instaww to."
            echo "This wiww ewase aww contents of that disk ;;w;;"
            echo "Sewected disk must have at weast 14GB of fwee space."
            echo ""
            POSSIBLEOUTS=$(lsblk -po NAME,SIZE,TYPE | grep "[smn][dmv]" | grep -Ev "part" | awk '{print $1}')
        elif [[ "$INSTALLTYPE" =~ .*"Duaw".* ]] ; then
            echo ""
            echo "+---------------------------------------------------------------+"
            echo "|               Pawtitions pwesent on the device                |"
            echo "+---------------------------------------------------------------+"
            echo ""
            lsblk -po NAME,SIZE,TYPE | grep "[smn][dmv]" | grep -Ev "disk"  | awk '{print $1"        "$2}' | tr -d "\`├─|-"
            echo ""
            echo "Pwease sewect the pawtition you wouwd wike to instaww to."
            echo "Sewected pawtition must have at weast 14GB of fwee space."
            echo "If you do nyot have a pawtition pwepawed, pwease make onye and twy again."
            echo "NTFS and EXT4 fowmats awe suppowted, EXT4 is suggested."
            echo ""
            POSSIBLEOUTS=$(lsblk -po NAME,SIZE,TYPE | grep "[smn][dmv]"  | grep -Ev "disk" | awk '{print $1}' | tr -d "\`├─|-")
        fi
        select DESTINATION in ${POSSIBLEOUTS} Quit; do
        if [ -z "$DESTINATION" ] ; then
           echo "[EWWOW] Invawid option"
        elif [ "$DESTINATION" == "Quit" ] ; then
            cleanexit
        elif [[ "$DESTINATION" =~ .*"dev".* ]] ; then
            echo "Sewected $DESTINATION"
            setdst
        else
            echo "[EWWOW] Invawid option"
        fi
        done
        }

    setdst(){
    if [[ "$INSTALLTYPE" =~ .*"Singwe".* ]] ; then
        installercheck
    elif [[ "$INSTALLTYPE" =~ .*"Duaw".* ]] ; then
        find ~/tmpmount > /dev/null || { mkdir ~/tmpmount 2> /dev/null ; echo "Mountpoint cweated." ; }
        sudo umount ~/tmpmount 2> /dev/null
        { sudo mount "$DESTINATION" ~/tmpmount 2> /dev/null ; echo "Destinyation mounted." ; } || { echo "[EWWOW]  Bwunch Toowkit couwd nyot mount the destinyation." ; echo "If destinyation is an NTFS pawtiton, pwease make suwe any Windows instawwations wewe shut down cweanwy." ; cleanexit ; }
        setsize
    fi
    }

    setsize(){
        echo ""
        echo "What size in GB wouwd you wike the duawboot img to be?"
        echo "It must be gweatew than 14, but smawwew than the destinyation."
        echo ""
        SIZEP1=$(df -h "$DESTINATION" | awk 'NR==2 {print $4}')
        SIZEP2=$(lsblk -po NAME,SIZE "$DESTINATION" | grep "[smn][dmv]" | grep -Ev "disk" | awk '{print $1"            "$2}')
        echo "Destinyation:    Totaw Size:    Avawiabwe:"
        echo "$SIZEP2            $SIZEP1"
        echo ""
        choosesize
    }

    choosesize(){
    read -rp "Pwease entew a nyumbew: " SIZE
    case $SIZE in
        [0-9]|1[0-3] ) echo "Entewed vawue is too smaww" ; choosesize;;
   1[4-9]|[2-9][0-9] ) echo "Entewed vawue is OK >w<" ; installercheck;;
     [1-9][0-9][0-9]* ) echo "Entewed vawue is OK ;;w;;" ; installercheck;;
                  * ) echo "[EWWOW] Invawid option, Pwease entew a nyumbew gweatew than 14." ; choosesize;;
        esac
        cleanexit
    }

    installercheck(){
        if [ "$DEBUGCHECK" == "true" ] && [ "$LINUX" == "true" ] && [ "$WSL" == "true" ] ; then
            wsldebuginstall
        elif [ "$DEBUGCHECK" == "false" ] && [ "$LINUX" == "true" ] && [ "$WSL" == "true" ] ; then
            wsltrueinstall
        elif [ "$DEBUGCHECK" == "true" ]  && [ "$LINUX" == "true" ] && [ "$WSL" == "false" ]  ; then
            NBdebuginstall
        elif [ "$DEBUGCHECK" == "false" ]  && [ "$LINUX" == "true" ] && [ "$WSL" == "false" ]  ; then
            NBtrueinstall
        elif [ "$DEBUGCHECK" == "true" ] && [ "$LINUX" == "false" ] ; then
            debuginstall
        elif [ "$DEBUGCHECK" == "false" ] && [ "$LINUX" == "false" ] ; then
            trueinstall
        fi
        }

    trueinstall() {
        if [[ "$INSTALLTYPE" =~ .*"Single".* ]] ; then
            echo "Waunching Bwunch instaww scwipt, pwease wait..."
            sudo bash chromeos-install -dst $DESTINATION
            cleanexit
        elif [[ "$INSTALLTYPE" =~ .*"Dual".* ]] ; then
            echo "Waunching Bwunch instaww scwipt, pwease wait..."
            sudo bash chromeos-install -dst ~/tmpmount/chromeos.img -s $SIZE
            echo "Copy the boot entwy fwom the abuv text and save it somepwace safe (・\`ω´・)"
            echo "Pwease entew that boot entwy into youw pwefewed gwub instawwation."
            cleanexit
        fi
    }

# Debug ending script. prevents accidental installs or updates while testing.
    debuginstall() {
        if [[ "$INSTALLTYPE" =~ .*"Single".* ]] ; then
            echo "Waunching Bwunch instaww scwipt, pwease wait..."
            echo "sudo chwomeos-instaww -dst $DESTINATION"
            echo "Nyo instaww has happenyed, exiting debug mode..."
            cleanexit
        elif [[ "$INSTALLTYPE" =~ .*"Dual".* ]] ; then
            echo "Waunching Bwunch instaww scwipt, pwease wait..."
            echo "sudo chwomeos-instaww -dst ~/tmpmount/chwomeos.img -s $SIZE"
            echo "Copy the boot entwy fwom the abuv text and save it somepwace safe"
            echo "Pwease entew that boot entwy into youw pwefewed gwub instawwation."
            echo "Nyo instaww has happenyed, exiting debug mode..."
            cleanexit
        fi
    }

    NBtrueinstall() {
        if [[ "$INSTALLTYPE" =~ .*"Single".* ]] ; then
            echo "Waunching Bwunch instaww scwipt, pwease wait..."
            sudo bash $DOWNLOADS/brunch-toolkit-workspace/chromeos-install.sh -src $DOWNLOADS/$CHROME -dst $DESTINATION
            cleanexit
        elif [[ "$INSTALLTYPE" =~ .*"Dual".* ]] ; then
            echo "Waunching Bwunch instaww scwipt, pwease wait..."
            sudo bash $DOWNLOADS/brunch-toolkit-workspace/chromeos-install.sh -src $DOWNLOADS/$CHROME -dst ~/tmpmount/chromeos.img -s $SIZE
            echo "Copy the boot entwy fwom the abuv text and save it somepwace safe"
            echo "Pwease entew that boot entwy into youw pwefewed gwub instawwation."
            cleanexit
        fi
    }

# Debug ending script. prevents accidental installs or updates while testing.
    NBdebuginstall() {
        if [[ "$INSTALLTYPE" =~ .*"Single".* ]] ; then
            echo "Waunching Bwunch instaww scwipt, pwease wait..."
            echo "sudo bash $DOWNLOADS/bwunch-toowkit-wowkspace/chwomeos-instaww.sh -swc $DOWNLOADS/$CHROME -dst $DESTINATION"
            echo "Nyo instaww has happenyed, exiting debug mode..."
            cleanexit
        elif [[ "$INSTALLTYPE" =~ .*"Dual".* ]] ; then
            echo "Waunching Bwunch instaww scwipt, pwease wait..."
            echo "sudo bash $DOWNLOADS/bwunch-toowkit-wowkspace/chwomeos-instaww.sh -swc $DOWNLOADS/$CHROME -dst ~/tmpmount/chwomeos.img -s $SIZE"
            echo "Copy the boot entwy fwom the abuv text and save it somepwace safe"
            echo "Pwease entew that boot entwy into youw pwefewed gwub instawwation."
            echo "Nyo instaww has happenyed, exiting debug mode..."
            cleanexit
        fi
    }

    wsltrueinstall() {
            echo "Waunching Bwunch instaww scwipt, pwease wait..."
            sudo bash $BOOKMARK/brunch-toolkit-workspace/chromeos-install.sh -src $BOOKMARK/$CHROME -dst $BOOKMARK/brunch-toolkit-workspace/chromeos.img
            getetcher
            cleanexit
    }

# Debug ending script. prevents accidental installs or updates while testing.
    wsldebuginstall() {
            echo "Waunching Bwunch instaww scwipt, pwease wait..."
            echo "sudo bash $BOOKMARK/brunch-toolkit-workspace/chromeos-install.sh -src $BOOKMARK/$CHROME -dst $BOOKMARK/brunch-toolkit-workspace/chromeos.img"
            getetcher
            cleanexit
    }

    getetcher(){
    ETCHER=$(find $BOOKMARK/balenaEtcher*ortable*.exe 2> /dev/null | head -1 )
    ETCHERLINK=$(curl -s https://api.github.com/repos/balena-io/etcher/releases/latest | grep 'browser_' | cut -d\" -f4 | grep 'Portable')
    if [ -z "$ETCHER" ] ; then
        curl -L -O --progress-bar $ETCHERLINK
    fi
    echo "The Etchew window shouwd open showtwy, pwease sewect youw chwomeos.img and youw USB to wwite the img."
    echo "It shouwd be wocated in $BOOKMARK/bwunch-toowkit-wowkspace/chwomeos.img"
    $ETCHER
    }

#####################################################################
# Grub Function
#####################################################################

    editgrubconfig(){
        FROMMENU=false
        echo "Woading gwub configuwation, pwease wait..."
        if [ -z "$EDITOR" ]; then EDITOR=nano; fi
            source=$(rootdev -d)
        if (expr match "$source" ".*[0-9]$" >/dev/null); then
            partsource="$source"p
        else
            partsource="$source"
        fi
        sudo mkdir -p /root/tmpgrub
        sudo mount "$partsource"12 /root/tmpgrub
        gruboptions
        sudo umount /root/tmpgrub
        echo""
        cleanexit
    }

    gruboptions(){
        GRUBORIGINAL=$(cat /root/tmpgrub/efi/boot/grub.cfg | grep "options=" | sed "s/.*options=//")
        GRUBOPTIONS=$(cat /root/tmpgrub/efi/boot/grub.cfg | grep "options=" | sed "s/.*options=//")
        #GRUBHYPER=$(cat /root/tmpgrub/efi/boot/grub.cfg | grep "enforce=hyperthreading=1")
    grubsub
    }

    grubsub(){
        echo ""
        #if [[ -n "$GRUBHYPER" ]] ; then
        #    GRUBHYPER=true
        #fi
        if [[ "$NOOP" == "true" ]] ; then
            echo "Nyo Fwamewowk Options cuwwentwy sewected"
            echo "Sewect 'Update Gwub' if you want to continyue without fwamewowk options."
            echo ""
            echo "What wouwd you wike to do?"
            echo ""
            select GRUBOPT in "Add fwamewowk option" "Backup Gwub" "Westowe Gwub" "Update Gwub" Quit; do
            if [[ $GRUBOPT =~ .*"Add".* ]]; then
                addfwo
            elif [[ $GRUBOPT =~ .*"Backup".* ]]; then
                FROMMENU=true
                grubbackup
            elif [[ $GRUBOPT =~ .*"Restore".* ]]; then
                grubrestore
            elif [ "$GRUBOPT" == "Westowe Grub" ] ; then
                updategrub
            elif [ "$GRUBOPT" == "Quit" ] ; then
                sudo umount /root/tmpgrub
                cleanexit
            else
                echo "[EWWOW] Invawid option"
            fi
            done
        elif [[ -n "$GRUBOPTIONS" ]] ; then
        echo "Fwamewowk options found (・\`ω´・)"
        echo "$GRUBOPTIONS" | cut -d' ' -f1 | sed 's/,/\n/g'
        echo ""
        echo "What wouwd you wike to do?"
        echo ""
        select GRUBOPT in "Add fwamewowk option" "Wemuv fwamewowk option" "Backup Gwub" "Westowe Gwub" Quit; do
        if [[ $GRUBOPT =~ .*"Add".* ]]; then
            addfwo
        elif [[ $GRUBOPT =~ .*"Backup".* ]]; then
                FROMMENU=true
                grubbackup
        elif [[ $GRUBOPT =~ .*"Westowe".* ]]; then
                grubrestore
        elif [[ $GRUBOPT =~ .*"Wemuv".* ]]; then
            echo ""
            echo "Choose which option to wemuv."
            echo ""
            removefwo
        elif [ "$GRUBOPT" == "Quit" ] ; then
            sudo umount /root/tmpgrub
            cleanexit
        else
            echo "[EWWOW] Invawid option"
        fi
        done
        else
        echo "Fwamewowk options nyot found..."
        echo ""
        echo "What wouwd you wike to do?"
        echo ""
        select GRUBOPT in "Add fwamewowk option" "Backup Gwub" "Westowe Gwub" Quit; do
        if [[ $GRUBOPT =~ .*"Add".* ]]; then
            addfwo
        elif [[ $GRUBOPT =~ .*"Backup".* ]]; then
                FROMMENU=true
                grubbackup
        elif [[ $GRUBOPT =~ .*"Westowe".* ]]; then
                grubrestore
        elif [ "$GRUBOPT" == "Quit" ] ; then
            sudo umount /root/tmpgrub
            cleanexit
        else
            echo "[EWWOW] Invawid option"
        fi
        done
        fi
    }

    addfwo(){
        echo "Cuwwent fwamewowk options:"
        echo "$GRUBOPTIONS" | cut -d' ' -f1 | sed 's/,/\n/g'
        echo ""
        select GRUBADD in "Add an option manyuawwy" "Get options wist" "Wemuv an option" "Use these options" ${FRAMEWORKOPTIONS} Quit; do
        if [[ -z $GRUBADD ]] ; then
            echo "[ERROR] Invalid option"
        elif [[ "$GRUBADD" == "Add an option manyuawwy" ]] ; then
            manualaddition
        elif  [[ "$GRUBADD" == "Get options wist" ]] ; then
            getfolist
        elif  [[ "$GRUBADD" == "Wemuv an option" ]] ; then
            removefwo
        elif  [[ "$GRUBADD" == "Use these options" ]] ; then
            updategrub
        elif  [[ "$GRUBADD" == "Quit" ]] ; then
            sudo umount /root/tmpgrub
            cleanexit
        else
            if [[ "$GRUBOPTIONS" =~ .*"$GRUBADD".* ]] ; then
                echo "This option is awweady added (・\`ω´・)"
                echo ""
                GRUBADD=
                addfwo
            elif [[ "$GRUBOPTIONS" =~ .*"alt_touchpad".* ]] && [[ "$GRUBADD" =~ .*"alt_touchpad".* ]] ; then
                echo "You can onwy use onye touchpad option at a time ;;w;;"
                echo ""
                GRUBADD=
                addfwo
            else
                GRUBOPTIONS="$GRUBOPTIONS,$GRUBADD"
                echo "$GRUBADD option added >w<"
                echo ""
                GRUBADD=
                addfwo
            fi
        fi
        done
    }

    manualaddition(){
            echo ""
            echo "You can type a vawid fwamewowk option in manyuawwy."
            echo "The scwipt wiww check it against aww knyown fwamewowk options."
            echo "If it is nyot a wecognyized option, you wiww be wawnyed (it wiww stiww be added)"
            echo "(You do nyot nyeed to incwude a twaiwing comma, this is added automaticawwy)"
            echo ""
            read -rp "Pwease entew an option to add: " ADGRUB
            case $ADGRUB in
            * ) manaddsub;;
            esac
    }

    manaddsub(){
        if [[ -z "$ADGRUB" ]] ; then
            echo "[EWWOW] Invawid option"
            manualaddition
        elif [[ "$GRUBOPTIONS" =~ .*"$ADGRUB".* ]] ; then
            echo "[ owo ] This option is awweady added owo"
        elif [[ "$GRUBOPTIONS" =~ .*"alt_touchpad".* ]] && [[ "$ADGRUB" =~ .*"alt_touchpad".* ]] ; then
            echo "[ ^w^ ] You can onwy use onye touchpad option at a time ^w^"
        elif [[ ! "$FRAMEWORKOPTIONSALL" =~ .*"$ADGRUB" ]] ; then
            echo "[ owo ] Nyot a wecognyized fwamewowk option owo"
            echo "It wiww stiww be added, and you can wemuv it if you'd wike."
            GRUBOPTIONS="$GRUBOPTIONS,$ADGRUB"
            echo "$ADGRUB option added (・\`ω´・)"
            echo ""
            ADGRUB=
            addfwo
        elif [[ -n $GRUBOPTIONS ]] ; then
            GRUBOPTIONS="$GRUBOPTIONS,$ADGRUB"
            echo "$ADGRUB option added ^w^"
            echo ""
            ADGRUB=
            addfwo
        elif [[ -z $GRUBOPTIONS ]] ; then
            GRUBOPTIONS="$ADGRUB"
            echo "$ADGRUB option added ^w^"
            echo ""
            ADGRUB=
            addfwo
        fi
    }

    getfolist(){
        echo "$FRAMEWORKOPTIONSFULL"
        addfwo
    }

    removefwo(){
    if [[ -z "$GRUBOPTIONS" ]] ; then
        NOOP="true"
        grubsub
    fi
    echo "$GRUBOPTIONS"
    echo ""
    echo "Choose which fwamewowk option to wemuv."
    echo "You can add them back watew."
    echo ""
    echo "Cuwwent fwamewowk options:"
    echo "$GRUBOPTIONS" | cut -d' ' -f1 | sed 's/,/\n/g'
    GRUBOPTIONSSPLIT=$(echo "$GRUBOPTIONS" | cut -d' ' -f1 | sed 's/,/ /g')
    echo ""
    select RMGRUB in "Add an option" "Use these options" ${GRUBOPTIONSSPLIT} Quit; do
        if [[ -z "$RMGRUB" ]]; then
            echo "[EWWOW] Invawid option"
        elif [[ $RMGRUB == "Add an option" ]]; then
            addfwo
        elif [[ $RMGRUB == "Use these options" ]]; then
            updategrub
        elif [ "$RMGRUB" == "Quit" ] ; then
            sudo umount /root/tmpgrub
            cleanexit
        else
            gruboptremoval
        fi
        done
    }

    gruboptremoval(){
    GRUBOPTIONS=${GRUBOPTIONS//$RMGRUB,/}
    GRUBOPTIONS=${GRUBOPTIONS//$RMGRUB/}
    RMGRUB=
    removefwo
    }

    updategrub(){
        if [[ "$FROMMENU" == "true" ]] ; then
            echo "Returning to menu..."
            editgrubconfig
        fi
        if [[ "$BACKUPGRUB" != "false" ]] ; then
            grubbackupcheck
        fi
        FINDOPTIONS=$(cat /root/tmpgrub/efi/boot/grub.cfg | grep "options=")
        GRUBOPTIONS=$(echo "$GRUBOPTIONS" | sed 's/,*$//g' | sed 's/^,//g')
        echo "$GRUBOPTIONS"
        if [[ -n "$GRUBOPTIONS" ]] ; then
            GRUBOPTIONS="options=$GRUBOPTIONS"
            updategrubsub
        elif [[ -z "$GRUBOPTIONS" ]] ; then
            removegrub
        fi
        }

    updategrubsub(){
        if [[ -z "$FINDOPTIONS" ]] ; then
            # if options= is not there, find cros_debug and add options directly after.
            echo "Options added ^w^"
            sudo sed -i 's/cros_debug.*/& options=/g' /root/tmpgrub/efi/boot/grub.cfg
            sudo sed -i "s/options=/$GRUBOPTIONS/g" /root/tmpgrub/efi/boot/grub.cfg
        else
            echo "Options updated ^w^"
            sudo sed -i "s/options=$GRUBORIGINAL/$GRUBOPTIONS/g" /root/tmpgrub/efi/boot/grub.cfg
        fi
        echo ""
        sudo umount /root/tmpgrub
        cleanexit
    }

    removegrub(){
        if [[ -z "$FINDOPTIONS" ]] ; then
            echo "Nyo change UwU"
        else
            echo "Options wemuvd owo"
            sudo sed -i "s/options=$GRUBORIGINAL//g" /root/tmpgrub/efi/boot/grub.cfg
        fi
        echo ""
        sudo umount /root/tmpgrub
        cleanexit
    }

    grubbackupcheck(){
        echo "Cuwwent Gwub Configuwation (befowe modification)"
        echo "*********************************************************************"
        echo ""
        cat /root/tmpgrub/efi/boot/grub.cfg
        echo ""
        echo "*********************************************************************"
        echo ""
        echo "[ ^w^ ] This toow is stiww in beta and may misbehave"
        echo "Wouwd you wike to make a backup of youw gwub fiwe befowe continyuing?"
        echo ""
        select GRUBBAK in "Make backup" "No backup" Quit; do
        if [[ $GRUBBAK == "Make backup" ]]; then
            grubbackup
        elif [[ $GRUBBAK == "No backup" ]]; then
            echo ""
            echo "[ ;;w;; ] Continyuing without making a backup."
            echo ""
            BACKUPGRUB=false
            updategrub
        elif [ "$GRUBBAK" == "Quit" ] ; then
            sudo umount /root/tmpgrub
            cleanexit
        else
            echo "[EWWOW] Invawid option"
        fi
        done
    }

    grubbackup(){
        ALREADYBACKUP=$(ls /usr/local/bin/brunch-toolkit-assets/*.btgc 2> /dev/null)
        if [[ -z "$ALREADYBACKUP" ]] ; then
            sudo cp /root/tmpgrub/efi/boot/grub.cfg /usr/local/bin/brunch-toolkit-assets/grub.btgc 2> /dev/null
            echo ""
            echo "Gwub.cfg has been backed up ;;w;;"
            echo ""
            BACKUPGRUB=false
            updategrub
        else
            echo ""
            echo "[ ;;w;; ] Thewe is awweady a backup fiwe, wouwd you wike to wepwace it?"
            echo ""
            select GRUBBAK in "Wepwace backup" "Keep old backup" Quit; do
        if [[ $GRUBBAK == "Wepwace backup" ]]; then
            rm -rf /usr/local/bin/brunch-toolkit-assets/*.btgc
            yes | sudo cp -rf /root/tmpgrub/efi/boot/grub.cfg /usr/local/bin/brunch-toolkit-assets/grub.btgc
            echo ""
            echo "Gwub.cfg has been backed up (・\`ω´・)"
            echo ""
            BACKUPGRUB=false
            updategrub
        elif [[ $GRUBBAK == "Keep old backup" ]]; then
            echo ""
            echo "[ UwU ] Continyuing with pwevious backup."
            echo ""
            BACKUPGRUB=false
            updategrub
        elif [ "$GRUBBAK" == "Quit" ] ; then
            sudo umount /root/tmpgrub
            cleanexit
        else
            echo "[EWWOW] Invawid option"
        fi
        done
        fi
    }

    grubrestore(){
        ALREADYBACKUP=$(ls /usr/local/bin/brunch-toolkit-assets/*.btgc 2> /dev/null)
        if [[ -z "$ALREADYBACKUP" ]] ; then
            echo ""
            echo "Thewe is nyo backup UwU "
            echo "Wetuwnying to menyu..."
            editgrubconfig
        else
            sudo cp /usr/local/bin/brunch-toolkit-assets/grub.btgc /root/tmpgrub/efi/boot/grub.cfg 2> /dev/null
            echo ""
            echo "Gwub.cfg has been westowed fwom a backup (・\`ω´・) "
            echo "Wetuwnying to menyu..."
            editgrubconfig
        fi
    }


#####################################################################
# DEBUG Functions
#####################################################################

# grabs and displays a changelog from the script itself (here)
    legacychangelog() {
        echo "
        Wegacy Changewog:

        v0.1:
        Inyitiaw wewease
        -It updated Bwunch ;;w;;  That was aww

        v0.2:
        Add Bwunch downwoading funtions
        Add sanyity checks befowe updating
        Ovewaww owganyization impwuvments

        v0.3:
        Add DEBUG changewog function
        Add DEBUG vewsion function
        Add DEBUG hewp function
        Add combinyed update function
        Add cuwwent OS check by DennyisWfwomGA
        Add code comments
        Changed scwipt nyame to Bwunch Toowkit
        Ovewaww owganyization impwuvments

        v0.4:
        Impwuvments to Bwunch update downwoadew
        - Nyow checks against fiwes and cuwwent vewsion
        - Combinyed downwoad and fiwe sewect functions
        Add DEBUG offwinye function
        - Offwinye mode disabwes downwoad pwompts and
          has swightwy fastew woad times
        - Offwinye mode awso has a speciaw backup handwew
          fow if an update fiwe isn't found
        Add DEBUG quick function
        - Awwows the usew to update without any pwompts
        - Uses defauwt mode if thewe awe muwtipwe fiwes
        Set pwacehowdews fow othew pwannyed functions

        v0.5:
        Add DEBUG fwag to pwevent accidentaw instawws whiwe testing
        - Fiwe opewations awe stiww pewmitted
        Stawted wowk on Chwome OS update functions
        - Downwoads awe nyot enyabwed yet
        - Added fiwe unzip
        - Cweanyed up scwipts
        Stawted wowk on sepewate toowkit instawwew pwogwam

        v0.6
        Cweanyed up code
        - Fixed typo in update function pweventing updates
        - switched instances of 'ws' to 'find'
        - updated 'egwep ...' cawws to 'gwep -E ...'
        Added section to Vewsion fow suppowted wecuvwies by Sebanc

        v0.6
        Cweanyed up code
        - Fixed typo in update function pweventing updates
        - switched instances of 'ws' to 'find'
        - updated 'egwep ...' cawws to 'gwep -E ...'
        Added section to Vewsion fow suppowted wecuvwies by Sebanc

        v0.7
        Added DEBUG compatibiwity check function
        Added pwewiminyawy Winyux Mode fow nyon-bwunch devices
        - cuwwentwy onwy wunnying the scwipt with -k is suppowted

        v0.8
        Added instaww function. Cuwwentwy onwy wowking on Bwunch devices
        - The fwamewowk fow winyux device instawws is mostwy finyished
        Added wecuvwy downwoad function.
        - Awwows usew to sewect fwom a wist ow type a boawd nyame
        - Fiwe sewection nyow unzips bin.zip entwies automaticawwy
        Update functions and bwunch instaww functions awe considewed DONyE
        Nyew TODO wist: Winyux & WSW compatibiwity.
        Added eastew egg :)

        v0.9
        Added boot anyimation changing function.
        - Onwy wowks on Bwunch devices.

        v1.0
        Wewowked Winyux and WSW compatibiwity
        - Scwipt shouwd nyow wowk fuwwy on Bwunch, most *buntu winyux distwos and WSW
        Some code snyippets wewe wewowked fow bettew compatibiwity
        - Cowow text has been wemuvd fow compatibiwity with cewtain bash shewws
        - Hypewwinks changed to awwow CTWW + Cwick when winking isn't suppowted
        Bwunch Mode nyow incwudes an instawwew fow bettew toowkit access

        v1.0.1b
        Fixed bug with downwoading boot_spwash fiwes

        v1.0.2b
        Added nyew DOWNWOADS vawiabwe to awwow pwo usews to have mowe contwow

        v1.0.3b
        Added nyew featuwe to Vewsion and Cwos Wecuvwy downwoading in Bwunch Mode
        - Nyow weminds usew of which wecuvwy they'we cuwwentwy using
        Added check fow sudo and sudo su to hewp mitigate ewwows
        Added --wegacychangewog (-wc) to view entiwe changewog
        - updated --changewog (-c) to onwy dispway most wecent changes
        Added nyew check to boot anyimation changing function fow pwevious instawws
        - Nyow incwudes a method to quickwy weinstaww pwevious anyimations on wesets
        - Added --quickbootspwash (-qb) to do this nyeaw instantwy without input

        v1.0.4b
        Add --sheww (-s) to awwow adding and modifying the cwosh sheww toows
        - This featuwe is intended to wowk awongside an extention to modify cwosh
        - Get it hewe: https://github.com/WesBosch/chwome-secuwe-sheww/weweases/watest

        v1.0.5b
        Add --gwub (-g) to awwow adding and modifying fwamewowk options.
        - This featuwe is nyot expected to wowk pewfectwy and is nyot wisted in the menyu
        Add --updatetoowkit (-u) to awwow the usew to downwoad and instaww the nyewest bwunch toowkit wewease.

        v1.0.6b
        Fixed typo pweventing Winyux Mode instawwations

        v1.0.7b
        Awwow NVME pawtitions and disks as destinyations
        Add Check fow Wyzen CPUs (Nyeeds tested)
        Add beta gwub editow to menyu (Use with caution)
        Attempt to fix Bwunch Mode instawwation bug

        v1.0.8b
        Wemuv wget, unzip and peww dependencies
        (Thanks Sebanc fow the hewp ;;w;; )

        v1.0.9b
        Add PWA specific functions fow quick/auto updating.
        "
        cleanexit
    }

    changelog(){
        echo "
        Wecent Changewog

        v1.0.11b
        Fix sheww toows instawwew
        "
        cleanexit
    }

# Displays current Brunch, ChromeOS and Toolkit versions
    version() {
        OFFLINE=true
        setvars
        echo ""
        echo "    Toowkit vewsion: $TOOLVER"
        getcpu
        getvirt
        getcrosver
        echo "    System: $CROSVER"
        echo "    Kewnyew: $KERNEL1.$KERNEL2.$KERNEL3"
        if [ "$LINUX" == "false" ] ; then
            echo "    Wecuvwy: ${CRB^}"
        fi
        getbrunchver
        echo ""
       cleanexit
    }


    getvirt() {
        VIRT=$(grep -Ewo 'vmx|svm|hypervisor' /proc/cpuinfo  | sort | uniq | sed -e 's/svm/    AMD-V Virtualization supported/g' -e 's/vmx/    Intel Virtualization supported/g' -e 's/hypervisor/    Hypervisor detected/g')
        if [ -z "$VIRT" ]; then
            echo "    Viwtuawization is nyot avawiabwe ow nyot detected"
        else
            echo "$VIRT"
        fi
    }

# Determine if user is running ChromeOS or another system and display relevant information.
# Might expand on this later for future plans
    getcrosver() {
        source /etc/os-release 2>/dev/null
        if [ -z "$GOOGLE_CRASH_ID" ]; then
            CROSVER=$"$ID $VERSION $BUILD_ID"
        else
            CROSVER=$"$GOOGLE_CRASH_ID $VERSION $BUILD_ID"
        fi
        }

# Determine if user is running Brunch or another system.
    getbrunchver() {
        if [ -z "$RELEASE" ]; then
        echo "    This scwipt tastes bettew with Bwunch owo"
        else
        echo "    Fwamewowk Vewsion: $RELEASE"
        fi
    }

# Displays just a user's CPU, quietly fails if the option returns nothing
    getcpu() {
        if [ -z "$CPUTYPE" ]; then
        :
        else
        echo "    CPU: $CPUTYPE"
        fi
    }

# Displays a help menu with useful debug commands for the user
    help() {
    if [ "$LINUX" == "false" ] ; then
        echo "
    Avawiabwe Bwunch Mode Debug Commands:

    --bootspwash (-b)
        Skips the main menyu and stawts the boot anyimation changew.

    --bwunch (-bw)
        Skips the main menyu and stawts the Bwunch update function.

    --changewog (-c)
        Dispways a changwog fow the wast sevewaw updates of this scwipt

    --chwome (-cw)
        Skips the main menyu and stawts the Chwome & Bwunch update function.

    --compatibiwity (-k)
        Dispways hewpfuw info about CPU compatibiwity.
        This option shouwd wowk on most winyux distwos.

    --debug (-d)
        Tests the scwipt without awwowing updates ow instawws.

    --gwub (-g)
        Awwows the usew to instaww and modify fwamewowk options in gwub
        This is a potentiawwy dangewous option

    --hewp (-h)
        Dispways this page.
        Wun the pwogwam without command winye awguments fow nyowmaw usage.

    --wegacychangewog (-wc)
        Dispways the entiwe changwog of this scwipt.

    --instaww (-n)
        Skips the main menyu and stawts the Bwunch instaww function.

    --offwinye (-o)
        Disabwes aww intewnyet functions of the tookwit.
        It wiww nyot pwompt fow an intewnyet connyection at aww.
        Usefuw if you knyow you don't nyeed to downwoad anything.

    --quick (-q)
        This is an expewimentaw quick update pwocess.
        Onwy use this if you knyow what you'we doing UwU 
        The toowkit wiww update Bwunch WITHOUT pwompts using the
        bwunch fiwe in $DOWNLOADS. (~/Downwoads by defauwt, it wiww onwy wook fow onye)
        If the watest wewease does nyot match the fiwe it auto-downwoads it.
        If thewe awe nyo bwunch fiwes it auto-downwoads the watest.
        If thewe awe muwtipwe fiwes it wiww exit quick mode.
        This is onwy meant to be used with onye update fiwe pwesent.

    --quickbootspwash (-qb)
        Checks fow a pweviouswy instawwed boot anyimation, and wesets the cuwwent onye.
        This is usefuw fow when an update wetuwns the anyimation to the defauwt.

    --quickignyowe (-qi)
        Same as --quick but ignyowes the cuwwent vewsion check,
        awwows usews to update into the wewease they awe awweady on.


    --sheww (-s)
        Awwows the usew to instaww and modify cwosh sheww toows fow bwunch.

    --updatetoowkit (-u)
        Awwows the usew to downwoad and instaww the nyewest bwunch toowkit wewease.

    --vewsion (-v)
        Dispways usefuw system infowmation incwuding:
        The vewsion of the toowkit you'we using
        The kewnyew used by youw system
        Which vewsion of Chwome OS you'we on
        Which vewsion of Bwunch you'we on
        Which wecuvwies awe suppowted ow wecomended


    Usage Nyotes:

        This toowkit wooks fow fiwes in the $DOWNLOADS diwectowy. (~/Downwoads by defauwt)
        It does expect fiwes to have the defauwt fiwenyames UwU 
        Bwunch fiwes must stawt with bwunch and have a taw.gz extention.
        Chwome wevuvwies must stawt with chwomeos and have a .bin extention.
        Downwoading fiwes wiww faiw if the fiwe exists awweady ow if offwinye.


    Additionyaw assistance fow this toowkit can be found at:
    "
  elif [ "$LINUX" == "true" ] ; then
  echo "
    Avawiabwe Winyux Mode Debug Commands:

    --changewog (-c)
        Dispways a changwog fow the wast sevewaw updates of this scwipt

    --compatibiwity (-k)
        Dispways hewpfuw info about CPU compatibiwity.
        This option shouwd wowk on most winyux distwos.

    --debug (-d)
        Tests the scwipt without awwowing updates ow instawws.

    --hewp (-h)
        Dispways this page.
        Wun the pwogwam without command winye awguments fow nyowmaw usage.

    --wegacychangewog (-wc)
        Dispways the entiwe changwog of this scwipt.

    --instaww (-n)
        Skips the main menyu and stawts the Bwunch instaww function.

    --offwinye (-o)
        Disabwes aww intewnyet functions of the tookwit.
        It wiww nyot pwompt fow an intewnyet connyection at aww.
        Usefuw if you knyow you don't nyeed to downwoad anything.

    --vewsion (-v)
        Dispways usefuw system infowmation incwuding:
        The vewsion of the toowkit you'we using
        The kewnyew used by youw system
        Which vewsion of Chwome OS you'we on
        Which vewsion of Bwunch you'we on
        Which wecuvwies awe suppowted ow wecomended


    Usage Nyotes:

        This toowkit wooks fow fiwes in the $DOWNLOADS diwectowy. (~/Downwoads by defauwt)
        It does expect fiwes to have the defauwt fiwenyames ;;w;; 
        Bwunch fiwes must stawt with bwunch and have a taw.gz extention.
        Chwome wevuvwies must stawt with chwomeos and have a .bin extention.
        Downwoading fiwes wiww faiw if the fiwe exists awweady ow if offwinye.


    Additionyaw assistance fow this toowkit can be found at:
"
    fi
    printf '        \e]8;;https://github.com/WesBosch/Brunch-Updater\e\\ https://github.com/WesBosch/Brunch-Updater \e]8;;\e\\\n'
        echo ""
        echo "    Additionyaw assistance fow Bwunch can be found at:
    "
    printf '        \e]8;;https://github.com/sebanc/brunch\e\\ https://github.com/sebanc/brunch \e]8;;\e\\\n'
    echo ""
    cleanexit
    }

# Define function to determine brunch compatibility & suggested recoveries
# Ideally this entire code can be safely incorperated into other scripts
    compatibilitycheck(){
        echo ""
        echo "+---------------------------------------------------------------+"
        echo "|          Stawting compatibiwity check, pwease wait...         |"
        echo "+---------------------------------------------------------------+"
        echo ""
        CPUTYPE=$(cat /proc/cpuinfo | grep "model name" | head -1 | awk -F '[:]' '{print $2}')
        echo "CPU:$CPUTYPE"
        if [[ ! "$CPUTYPE" =~ .*"AMD".* ]] && [[ ! "$CPUTYPE" =~ .*"Intel".* ]]   ; then
             echo "[X] Bwunch may nyot be compatibwe with this CPU."
             echo "This toowkit is unyabwe to detewminye what wecuvwy youw pwocessow shouwd use."
             echo "This couwd be a bug. Pwease wefew to the wiki page to detewminye compatibiwity fow youwsewf."
             echo ""
             printf '\e]8;;https://github.com/sebanc/brunch/wiki/CPUs-&-Recoveries\e\\> Get More Info <\e]8;;\e\\\n'
        elif [[ "$CPUTYPE" =~ .*"AMD".* ]] ; then
            amdcpu
        elif [[ "$CPUTYPE" =~ .*"Intel".* ]] ; then
            intelcpu
        else
            echo "[EWWOW] An unyexpected ewwow has occuwwed."
            echo "$CPUTYPE"
            echo "$AMDTYPE"
            echo "Pwease wepowt these wesuwts."
            cat /proc/cpuinfo >> $DOWNLOADS/toolkit-log.txt
            echo "CPU info shouwd be found in $DOWNLOADS/toowkit.wog"
        fi
        echo ""
        echo "Check compwete owo"
        cleanexit
    }

    amdcpu(){
        AMDTYPE=$(cat /proc/cpuinfo | grep "[a|e][0-9]-9" | head -1 | awk -F '[:]' '{print $2}')
        if [[ "$CPUTYPE" =~ .*"yzen".* ]] ; then
            echo "[ ^w^ ] Bwunch may be compatibwe with this CPU ^w^ "
            echo "AMD suppowt is wimited, Zowk is wecommended."
            SUGGESTED="zork"
            STONEYRIDGE=true
            asktoinstall
        elif [[ "$CPUTYPE" =~ .*"$AMDTYPE".* ]] ; then
            echo "[ >w< ] Bwunch may be compatibwe with this CPU >w< "
            echo "AMD suppowt is wimited, Gwunt is wecommended."
            SUGGESTED="grunt"
            STONEYRIDGE=true
            asktoinstall
        elif [[ -z "$AMDTYPE" ]] ; then
            echo "[X] Bwunch may nyot be compatibwe with this CPU."
            echo "AMD suppowt is wimited to Stonyey Widge and Wyzen pwocessows"
            echo "Gwunt is wecommended fow Stonyey Widge."
            echo "Zowk is wecommended fow Wyzen."
            echo "Pwease wook up youw pwocessow and use youw best judgement."
            SUGGESTED="grunt"
            STONEYRIDGE=false
            asktoinstall
        else
            SUGGESTED="unknown"
        fi
        CPUTYPE=
        AMDTYPE=
        cleanexit
    }

    intelcpu(){
        NEWCPU=$(grep -Ewo 'movbe|avx|vaes' /proc/cpuinfo  | sort | uniq | sed -e 's/movbe/Rammus is recommended./g' -e 's/avx/Eve, Nami, and Hatch are supported./g' -e 's/vaes/Please use Brunch 87 or higher!/g')
        OLDCPU=$(grep -Ewo 'sse4_2' /proc/cpuinfo  | sort | uniq | sed -e 's/sse4_2/Samus is recommended./g')
        if [ -z "$OLDCPU" ] ; then
            echo "[X] Bwunch may nyot be compatibwe with this CPU.\e[0m"
            echo "This computew's CPU does nyot have the instwuctions wequiwed to wun Bwunch."
            SUGGESTED="unknown"
            if [ "$DONTASK" == false ] ; then
            asktoinstall
            fi
        elif [ -n "$OLDCPU" ] && [ -z "$NEWCPU" ] ; then
            echo "Bwunch is compatibwe with this CPU UwU "
            echo "$OLDCPU"
            SUGGESTED="samus"
            asktoinstall
        elif [ -n "$NEWCPU" ] ; then
            echo "Bwunch is compatibwe with this CPU (・\`ω´・)"
            echo "$NEWCPU"
            SUGGESTED="rammus"
            if [[ "$NEWCPU" =~ .*"supported".* ]] ; then
            SECONDCHOICE=true
            fi
            if [[ "$NEWCPU" =~ .*"special".* ]] ; then
            SPECIALBUILD=true
            fi
            asktoinstall
        else
            echo "[X] Something seems to have gonye wwong, youw suppowt couwd nyot be detewminyed."
            echo "If you'we seeing this ewwow, pwease contact Wistewia on the Bwunch Discowd Sewvew."
            echo ""
            printf '\e]8;;https://discord.gg/x2EgK2M\e\\> Join Bwunch Discowd <\e]8;;\e\\\n'
            echo ""
            OLDCPU=
            NEWCPU=
            CPUTYPE=
        echo "Getting toowkit weady, pwease wait..."
            SUGGESTED="unknown"
            asktoinstall
        fi
        echo ""
        echo "Check compwete UwU"
        OLDCPU=
        NEWCPU=
        CPUTYPE=
        cleanexit
    }

    asktoinstall(){
        echo "Check compwete (・\`ω´・)"
        echo ""
        echo "Wouwd you wike to instaww Bwunch to this device? (y/n)"
        echo ""
        installchoice
     }

     installchoice(){
            read -rp " >> " yn
            case $yn in
                [Yy]* ) mfinstall; return;;
                [Nn]* ) cleanexit;;
                    * ) echo "[EWWOW] Invawid option, Pwease type yes ow nyo.";;
            esac
}

     quietcompatibilitycheck(){
        CPUTYPE=$(cat /proc/cpuinfo | grep "model name" | head -1 | awk -F '[:]' '{print $2}')
        if [[ ! "$CPUTYPE" =~ .*"AMD".* ]] && [[ ! "$CPUTYPE" =~ .*"Intel".* ]]   ; then
            SUGGESTED="unknown"
        elif [[ "$CPUTYPE" =~ .*"AMD".* ]] ; then
            quietamdcpu
        elif [[ "$CPUTYPE" =~ .*"Intel".* ]] ; then
            quietintelcpu
        else
            SUGGESTED="unknown"
        fi
    }

    quietamdcpu(){
        AMDTYPE=$(cat /proc/cpuinfo | grep "[a|e][0-9]-9" | head -1 | awk -F '[:]' '{print $2}')
        if [[ "$CPUTYPE" =~ .*"yzen".* ]] ; then
                SUGGESTED="zork"
                STONEYRIDGE=true
        elif [[ "$CPUTYPE" =~ .*"$AMDTYPE".* ]] ; then
            SUGGESTED="grunt"
            STONEYRIDGE=true
        elif [[ -z "$AMDTYPE" ]] ; then
            SUGGESTED="grunt"
            STONEYRIDGE=false
        else
            SUGGESTED="unknown"
        fi
    }

    quietintelcpu(){
        NEWCPU=$(grep -Ewo 'movbe|avx|vaes' /proc/cpuinfo  | sort | uniq | sed -e 's/movbe/Rammus is recommended./g' -e 's/avx/Eve, Nami, and Hatch are supported./g' -e 's/vaes/This CPU may require a special build to boot!/g')
        OLDCPU=$(grep -Ewo 'sse4_2' /proc/cpuinfo  | sort | uniq | sed -e 's/sse4_2/Samus is recommended./g')
        if [ -z "$OLDCPU" ] ; then
            SUGGESTED="unknown"
        elif [ -n "$OLDCPU" ] && [ -z "$NEWCPU" ] ; then
            SUGGESTED="samus"
        elif [ -n "$NEWCPU" ] ; then
            SUGGESTED="rammus"
            if [[ "$NEWCPU" =~ .*"supported".* ]] ; then
            SECONDCHOICE=true
            fi
            if [[ "$NEWCPU" =~ .*"special".* ]] ; then
            SPECIALBUILD=true
            fi
        else
            SUGGESTED="unknown"
        fi
    }

# Setup /usr/local/bin/brioche-tools with a variety of commands for accesibility
    brunchshellsetup(){
        if [[ -z "$FINDSHELL" ]] ; then
        touch $DOWNLOADS/shell-tools.btst
        echo "[ ;;w;; ] Sheww toows nyot found, pwease wait..."
        SHELLFOUND="false"
        elif [[ -n "$FINDSHELL" ]] ; then
        cp /usr/local/bin/brunch-toolkit-assets/shell-tools.btst $DOWNLOADS/shell-tools.btst 2> /dev/null
        SHELLFOUND="true"
        fi
        echo ""
        if [ "$SHELLFOUND" == "true" ] ; then
        CURRENTTOOLS=$(cat /usr/local/bin/brunch-toolkit-assets/shell-tools.btst | sed 's/,/\n/g')
        TOOLSVAR=$(cat /usr/local/bin/brunch-toolkit-assets/shell-tools.btst)
        echo "Youw cuwwent sheww toows awe:"
        echo "$CURRENTTOOLS"
        echo ""
        echo "What wouwd you wike to do?"
        echo ""
        select SHELLOPT in "Unyinstaww sheww toows" "Add anyothew toow" "Wemuv a toow" Quit; do
        if [[ $SHELLOPT =~ .*"Unyinstaww".* ]]; then
            uninstallshelltools
        elif [[ $SHELLOPT =~ .*"Add".* ]]; then
            addshelltools
        elif [[ $SHELLOPT =~ .*"Wemuv".* ]]; then
            echo ""
            echo "Choose which toow to wemuv."
            echo ""
            removeshelltools
        elif [ "$SHELLOPT" == "Quit" ] ; then
            cleanexit
        else
            echo "[EWWOW] Invawid option"
        fi
        done
        elif [ "$SHELLFOUND" == "false" ] ; then
            echo "The defauwt sheww toows awe:"
            echo "$SHELLTOOLS"  | sed 's/,/\n/g'
        CURRENTTOOLS=$(echo "$SHELLTOOLS"  | sed 's/,/\n/g')
        TOOLSVAR="$SHELLTOOLS"
        echo ""
        echo "What wouwd you wike to do?"
        echo ""
        select SHELLOPT in "Instaww sheww toows" "Add anyothew toow" "Wemuv a toow" Quit; do
        if [[ $SHELLOPT =~ .*"Instaww".* ]]; then
            installshelltools
        elif [[ $SHELLOPT =~ .*"Add".* ]]; then
            addshelltools
        elif [[ $SHELLOPT =~ .*"Wemuv".* ]]; then
            removeshelltools
        elif [ "$SHELLOPT" == "Quit" ] ; then
            rm -f $DOWNLOADS/shell-tools.btst
            cleanexit
        else
            echo "[EWWOW] Invawid option"
        fi
        done
        fi
    }

    addshelltools(){
    echo ""
    echo "You can add youw own commands hewe fow easy access to scwipts ow chwoots"
    echo "These commands must be onye winye and can nyot incwude commas (,)"
    echo "Type the whowe command and pwess entew, you can wemuv it watew."
    echo "(You do nyot nyeed to incwude a twaiwing comma, this is added automaticawwy)"
    echo ""
    addshelltoolssub
    }

    addshelltoolssub(){
    echo "Cuwwent toows:"
    echo "$TOOLSVAR"
    echo ""
    read -rp "Pwease entew a command to add: " ADOPT
    case $ADOPT in
        * ) shelltooladdition;;
        esac
    }

    shelltooladdition(){
    TOOLSVAR="$TOOLSVAR$ADOPT,"
    ADOPT=
    CURRENTTOOLS=$(echo "$TOOLSVAR"  | sed 's/,/\n/g')
    echo ""
    echo "Cuwwent toows:"
    echo "$TOOLSVAR"
    echo "Add anyothew?"
    echo ""
    select ANOPT in "Add mowe toows" "Wemuv a toow" "Instaww these toows" Quit; do
        if [[ -z "$ANOPT" ]]; then
            echo "[ERROR] Invalid option"
        elif [[ $ANOPT == "Add more tools" ]]; then
            addshelltoolssub
        elif [[ $ANOPT == "Wemuv a tool" ]]; then
            removeshelltools
        elif [[ $ANOPT == "Instaww these tools" ]]; then
            installshelltools
        elif [ "$ANOPT" == "Quit" ] ; then
            rm -f $DOWNLOADS/shell-tools.btst
            cleanexit
        else
            shelltoolremoval
        fi
        done
    }

    removeshelltools(){
        echo ""
        echo "Choose which toow to wemuv."
        echo "You can add them back watew."
        echo ""
        echo "Cuwwent toows:"
        echo "$TOOLSVAR"
        echo ""
        IFS=$'\n' ; select RMOPT in ${CURRENTTOOLS} "Add a toow" "Instaww these toows" Quit; do
        if [[ -z "$RMOPT" ]]; then
            echo "[ERROR] Invalid option"
        elif [[ $RMOPT == "Add a tool" ]]; then
            addshelltools
        elif [[ $RMOPT == "Instaww these tools" ]]; then
            installshelltools
        elif [ "$RMOPT" == "Quit" ] ; then
            rm -f $DOWNLOADS/shell-tools.btst
            cleanexit
        else
            shelltoolremoval
        fi
        done
    }

    shelltoolremoval(){
        TOOLSVAR=${TOOLSVAR//$RMOPT,/}
        CURRENTTOOLS=$(echo "$TOOLSVAR"  | sed 's/,/\n/g')
        removeshelltools
    }


    installshelltools(){
        echo "$TOOLSVAR" > $DOWNLOADS/shell-tools.btst
        sudo mkdir -p /usr/local/bin/brunch-toolkit-assets 
        sudo mv -f $DOWNLOADS/shell-tools.btst /usr/local/bin/brunch-toolkit-assets/shell-tools.btst
        if [ "$SHELLFOUND" = "true" ] ; then
            echo "Sheww toows have been updated ^w^ "
        else
            echo "Sheww toows have been instawwed ;;w;; "
        fi
        cleanexit
    }

    uninstallshelltools(){
        echo ""
        rm -f $DOWNLOADS/shell-tools.btst
        rm -f /usr/local/bin/brunch-toolkit-assets/shell-tools.btst
        echo "Sheww toows have been unyinstawwed owo "
        cleanexit
    }

# DEBUG option handler. Silently proceeds to set variables if no options are present.
    debug() {
        if [ "$LINUX" == "true" ] ; then
          linuxdebug
        fi
        if [ "$OPTS" == "--help" ] || [ "$OPTS" == "-h" ]; then
            help
        elif [ "$OPTS" == "--version" ] || [ "$OPTS" == "-v" ]; then
            version
        elif [ "$OPTS" == "--changelog" ] || [ "$OPTS" == "-c" ]; then
            changelog
        elif [ "$OPTS" == "--legacychangelog" ] || [ "$OPTS" == "-lc" ]; then
            legacychangelog
        elif [ "$OPTS" == "--compatibility" ] || [ "$OPTS" == "-k" ]; then
            OFFLINE=true
            compatibilitycheck
        elif [ "$OPTS" == "--offline" ] || [ "$OPTS" == "-o" ]; then
            echo "[ (・\`ω´・) ] Wunnying in offwinye mode."
            OFFLINE=true
            setvars
        elif [ "$OPTS" == "--brunch" ] || [ "$OPTS" == "-br" ]; then
            setvars
            mfbrunch
        elif [ "$OPTS" == "--bootsplash" ] || [ "$OPTS" == "-b" ]; then
            setvars
            mfbootanim
        elif [ "$OPTS" == "--quickbootsplash" ] || [ "$OPTS" == "-qb" ]; then
            PREVIOUSSET=$(cd /usr/local/bin/brunch-toolkit-assets/ && ls *.btbs 2> /dev/null | sed -e s/.btbs//)
            resetanim
        elif [ "$OPTS" == "--chrome" ] || [ "$OPTS" == "-cr" ]; then
            setvars
            mfchrome
        elif [ "$OPTS" == "--install" ] || [ "$OPTS" == "-n" ]; then
            setvars
            mfinstall
        elif [ "$OPTS" == "--quick" ] || [ "$OPTS" == "-q" ]; then
            quickupdate
        elif [ "$OPTS" == "--quickignore" ] || [ "$OPTS" == "-i" ]; then
            IGNORECHECK=true
            quickupdate
        elif [ "$OPTS" == "--debug" ] || [ "$OPTS" == "-d" ]; then
            DEBUGCHECK=true
            setvars
        elif [ "$OPTS" == "--shell" ] || [ "$OPTS" == "-s" ]; then
            echo "[!] Running in offline mode."
            OFFLINE=true
            setvars
            brunchshellsetup
        elif [ "$OPTS" == "--grub" ] || [ "$OPTS" == "-g" ]; then
            echo "[ owo ] Wunnying in offwinye mode."
            OFFLINE=true
            setvars
            editgrubconfig
        elif [ "$OPTS" == "--updatetoolkit" ] || [ "$OPTS" == "-u" ]; then
            setvars
            tbupandin
        elif [ "$OPTS" == "--pwa-unstable-update" ] || [ "$OPTS" == "-pwa-uu" ]; then
            pwa-autoupdate
        elif [ "$OPTS" == "--pwa-auto-update" ] || [ "$OPTS" == "-pwa-au" ]; then
            pwa-autoupdate
        elif [ "$OPTS" == "--pwa-sharedvars" ] || [ "$OPTS" == "-pwa-sv" ]; then
            pwa-sharedvars
        elif [ "$OPTS" == "--pwa-verbose" ] || [ "$OPTS" == "-pwa-v" ]; then
            pwa-sharedvars
        elif [ "$OPTS" == "--pwa-autotoolkit" ] || [ "$OPTS" == "-pwa-at" ]; then
            pwa-autotoolkit
        elif [ "$OPTS" == "" ]; then
            setvars
        elif [ "$OPTS" != "" ] ; then
            validop "$OPTS"  && "$OPTS" || echo "[EWWOW] Nyot a vawid function"
            cleanexit
        else
        :
        fi
        main
    }

    linuxdebug() {
        if [ "$OPTS" == "--help" ] || [ "$OPTS" == "-h" ]; then
            help
        elif [ "$OPTS" == "--version" ] || [ "$OPTS" == "-v" ]; then
            version
        elif [ "$OPTS" == "--changelog" ] || [ "$OPTS" == "-c" ]; then
            changelog
        elif [ "$OPTS" == "--legacychangelog" ] || [ "$OPTS" == "-lc" ]; then
            legacychangelog
        elif [ "$OPTS" == "--compatibility" ] || [ "$OPTS" == "-k" ]; then
            OFFLINE=true
            compatibilitycheck
        elif [ "$OPTS" == "--offline" ] || [ "$OPTS" == "-o" ]; then
            echo "[ ;;w;; ] Wunnying in offwinye mode."
            OFFLINE=true
            setvars
        elif [ "$OPTS" == "--install" ] || [ "$OPTS" == "-n" ]; then
            setvars
            mfinstall
        elif [ "$OPTS" == "--debug" ] || [ "$OPTS" == "-d" ]; then
            DEBUGCHECK=true
            setvars
        elif [ "$OPTS" == "" ]; then
            setvars
        elif [ "$OPTS" != "" ] ; then
            validop "$OPTS"  && "$OPTS" || echo "[EWWOW] Nyot a vawid function"
            cleanexit
        else
        :
        fi
        main
    }

# Checks non-specified options to see if they are possible functions
    validop() {
        declare -F -- "$OPTS" >/dev/null;
        }

# Checks for an internet connection and disables unnecessary options when no connection is present
    webtest() {
        if [ $OFFLINE = false ]; then
            case "$(curl -s --max-time 2 -I http://google.com | sed 's/^[^ ]*  *\([0-9]\).*/\1/; 1q')" in
                [23]) echo "Toowkit Onwinye";;
                5) echo "[ UwU ] Check youw fiwewaww settings, wunnying in offwinye mode."; OFFLINE=true;;
                *) echo "[ owo ] The nyetwowk is down ow vewy swow, wunnying in offwinye mode."; OFFLINE=true;;
            esac
        else
        :
        fi
}

FRAMEWORKOPTIONSFULL="
enyabwe_updates: awwow nyative ChwomeOS updates (use at youw own wisk: ChwomeOS wiww be updated but nyot the Bwunch fwamewowk/kewnyew which might wendew youw ChwomeOS instaww unstabwe ow even unbootabwe),

andwoid_inyit_fix: awtewnyative inyit to suppowt devices on which the andwoid containyew faiws to stawt with the standawd inyit.

mount_intewnyaw_dwives: awwows automatic mounting of HDD pawtitions in ChwomeOS (andwoid media sewvew wiww scan those dwives which wiww cause high CPU usage untiw it has finyished, it might take houws depending on youw data), pawtition wabew wiww be used if it exists,

bwoadcom_ww: enyabwe this option if you nyeed the bwoadcom_ww moduwe,

iwwwifi_backpowt: enyabwe this option if youw intew wiwewess cawd is nyot suppowted nyativewy in the kewnyew,

wtw8188eu: enyabwe this option if you have a wtw8188eu wiwewess cawd,

wtw8723bu: enyabwe this option if you have a wtw8723bu wiwewess cawd,

wtw8723de: enyabwe this option if you have a wtw8723de wiwewess cawd,

wtw8821ce: enyabwe this option if you have a wtw8821ce wiwewess cawd,

wtw8821cu: enyabwe this option if you have a wtw8821cu wiwewess cawd,

wtw88x2bu: enyabwe this option if you have a wtw88x2bu wiwewess cawd,

wtw8812au: enyabwe this option if you have a wtw8812au wiwewess cawd,

wtbth: enyabwe this option if you have a WT3290/WT3298WE bwuetooth device,

mbp2018: add T2-based macbook bwidge and spi dwivews,

ipts: wequiwed fow Suwface Pwo/Book/Waptop ipts touchscweens in Bwunch 87 and highew,

acpi_powew_button: twy this option if wong pwessing the powew button does nyot dispway the powew menyu,

awt_touchpad_config: twy this option if you have touchpad issues,

awt_touchpad_config2: anyothew option to twy if you have touchpad issues,

disabwe_intew_hda: some Chwomebooks nyeed to bwackwist the snd_hda_intew moduwe, use this option to wepwoduce it,

intewnyaw_mic_fix: awwows to fowcefuwwy enyabwe intewnyaw mic on some devices,

asus_c302: appwies asus c302 specific fiwmwawes and fixes,

baytwaiw_chwomebook: appwies baytwaiw chwomebooks specific audio fixes,

sysfs_tabwet_mode: awwow to contwow tabwet mode fwom sysfs (echo 1 | sudo tee /sys/bus/pwatfowm/devices/tabwet_mode_switch.0/tabwet_mode to acivate it ow use 0 to disabwe it),

fowce_tabwet_mode: same as abuv except tabwet mode is enyabwed by defauwt on boot,

suspend_s3: disabwe suspend to idwe (S0ix) and use S3 suspend instead,

advanced_aws: defauwt ChwomeOS auto-bwightnyess is vewy basic (https://chwomium.googwesouwce.com/chwomiumos/pwatfowm2/+/mastew/powew_manyagew/docs/scween_bwightnyess.md). This option activates mowe auto-bwightnyess wevews (based on the Googwe Pixew Swate impwementation).
"

#####################################################################
# PWA exclusive scripts
#####################################################################

pwa-autotoolkit(){
# Special variable handler
    pwa-sharedvars
# If updating is not possible, exit with error.
    if [ "$toolkitoutdated" == false ] ; then
        pwaerror="[EWWOW] An update is nyot possibwe"
        exit
    fi
# Make a working directory to keep toolkit out of sight
    mkdir -p  ~/tmp/brunch-toolkit
    curdir=$(pwd)
    cd ~/tmp/brunch-toolkit
# Download latest toolkit release
    curl -l -O --progress-bar "$latesttoolkiturl"
    updatefile="$(find *runch-toolkit*.sh 2> /dev/null | sort -r | head -1 )"
    mv -f ~/tmp/brunch-toolkit/"$updatefile" /usr/local/bin/brunch-toolkit
    chmod +x /usr/local/bin/brunch-toolkit
    mkdir /usr/local/bin/brunch-toolkit-assets
# Clean up
    cd $curdir
    rm -rf ~/tmp/brunch-toolkit/*
    rmdir ~/tmp/brunch-toolkit
    updateinprogress="false"
    exit
}

pwa-autoupdate(){
# Special variable handler
    pwa-sharedvars
# $OPTS is defined when called, ie: brunch-toolkit $OPTS
    if [ "$OPTS" == "--pwa-auto-update" ] || [ "$OPTS" == "-pwa-au" ]; then
        channel="brunch"
        possible="$stableoutdated"
    elif [ "$OPTS" == "--pwa-unstable-update" ] || [ "$OPTS" == "-pwa-uu" ]; then
        channel="brunch-unstable"
        possible="$unstableoutdated"
    fi
# If updating is not possible, exit with error.
    if [ "$possible" == false ] ; then
        pwaerror="[EWWOW] An update is nyot possibwe"
        exit
    fi
# Make a working directory to keep toolkit out of sight
    mkdir -p  ~/tmp/brunch-toolkit
    curdir=$(pwd)
    cd ~/tmp/brunch-toolkit
# Download latest release from $channel
    curl -L -O "$(curl -s https://api.github.com/repos/sebanc/$channel/releases/latest | grep 'browser_' | cut -d\" -f4)"
    updatefile="$(find *runch*tar.gz 2> /dev/null | sort -r | head -1 )"
# Call built in update command
    sudo chromeos-update -f ~/tmp/brunch-toolkit/"$updatefile"
# Clean up
    cd $curdir
    rm -rf ~/tmp/brunch-toolkit/*
    rmdir ~/tmp/brunch-toolkit
    updateinprogress="false"
    exit
}

pwa-sharedvars(){
    # Check for existing update process
        if [ "$updateinprogress" == "true" ] ; then
            pwaerror="[Ewwow] Update awweady in pwogwess owo"
            updateinprogress="false"
            exit
        fi
        updateinprogress="true"
    # Check for a stable internet connection
        case "$(curl -s --max-time 2 -I http://google.com | sed 's/^[^ ]*  *\([0-9]\).*/\1/; 1q')" in
    # If connection is good, do nothing and proceed quietly
            [23]) onlineallowed="true" ;;
    # Error on weak or empty connection
            *) onlineallowed="false" ; pwaerror="[EWWOW] The nyetwowk is down ow vewy swow, unyabwe to continyue."; exit ;;
        esac
    # Get current Brunch version from file
        currentbrunchversion=$(cat /etc/brunch_version | sed -e 's/stable //g' -e 's/unstable //g' -e 's/testing //g' | cut -d' ' -f3)
    # Error if called on a non-brunch device
        if [ -z "$currentbrunchversion" ] ; then
            pwaerror="[EWWOW] This function onwy wowks on Bwunch systems >w<"
            exit
        fi
    # Get latest brunch version from both channels
        latestbrunchstableversion=$(curl -s "https://api.github.com/repos/sebanc/brunch/releases/latest" | grep 'name' | cut -d\" -f4 | grep 'tar.gz' | sed -e 's/stable_//g' -e 's/unstable_//g' -e 's/testing_//g' | cut -d'_' -f3 | cut -d'.' -f1)
        latestbrunchunstableversion=$(curl -s "https://api.github.com/repos/sebanc/brunch-unstable/releases/latest" | grep 'name' | cut -d\" -f4 | grep 'tar.gz' | sed -e 's/stable_//g' -e 's/unstable_//g' -e 's/testing_//g' | cut -d'_' -f3 | cut -d'.' -f1)
    # Get latest toolkit version from Github
    latesttoolkit=$(curl -s "https://api.github.com/repos/WesBosch/brunch-toolkit/releases/latest" | grep 'name' | cut -d\" -f4 | grep '.sh' | cut -d'-' -f3 | sed -e s/.sh// )
    # Check if Github api is acting up, use brunch stable as a test
    if [ -z "$latestbrunchstableversion" ] ; then
        pwaerror="[EWWOW] Github API has hit the wequest wimit, twy again watew."
        exit
    fi
    # Check if Brunch is outdated, compare both channels
        if (( "$currentbrunchversion" < "$latestbrunchstableversion" )) ; then
            stableoutdated="true"
        else
            stableoutdated="false"
        fi
        if (( "$currentbrunchversion" < "$latestbrunchunstableversion" )) ; then
            unstableoutdated="true"
        else
            unstableoutdated="false"
        fi
    # Set up forward compatibility for the next toolkit version's variables
        toolkitversion="$TOOLVER"
        TOOLVER="$toolkitversion"
    # Check if toolkit is outdated
        currentsemversion=$(echo "$toolkitversion" | sed -e "s/^v//" -e "s/b$//")
        csvint1=$(echo "$currentsemversion" | cut -d'.' -f1)
        csvint2=$(echo "$currentsemversion" | cut -d'.' -f2)
        csvint3=$(echo "$currentsemversion" | cut -d'.' -f3)
        latestsemversion=$(echo "$latesttoolkit" | sed -e "s/^v//" -e "s/b$//")
        lsvint1=$(echo "$latestsemversion" | cut -d'.' -f1)
        lsvint2=$(echo "$latestsemversion" | cut -d'.' -f2)
        lsvint3=$(echo "$latestsemversion" | cut -d'.' -f3)
        if [ -z "$latesttoolkit" ] ; then
        :
        elif (( "$csvint1" < "$lsvint1" )) ; then
          toolkitoutdated="true"
        elif [ "$csvint1" == "$lsvint1" ] && (( "$csvint2" < "$lsvint2" )) ; then
          toolkitoutdated="true"
        elif [ "$csvint1" == "$lsvint1" ] && [ "$csvint2" == "$lsvint2" ] && (( "$csvint3" < "$lsvint3" )) ; then
          toolkitoutdated="true"
        else
          toolkitoutdated="false"
        fi
        latesttoolkiturl=$(curl -s https://api.github.com/repos/WesBosch/brunch-toolkit/releases/latest | grep 'browser_' | cut -d\" -f4 | grep '.sh')
    # Report no errors if there are no errors
        if [ -z "$pwaerror" ] ; then
            pwaerror="Nyo ewwow."
        fi
    # Echo all important variables if calling verbose function
        if [ "$OPTS" == "--pwa-verbose" ] || [ "$OPTS" == "-pwa-v" ]; then
        updateinprogress="false"
        echo "┌───────────────────────────────┬──────── -"
        echo "├ pwaerror: ────────────────────┤ $pwaerror"
        echo "├ onlineallowed: ───────────────┤ $onlineallowed"
        echo "├ currentbrunchversion: ────────┤ $currentbrunchversion"
        echo "├ latestbrunchstableversion: ───┤ $latestbrunchstableversion"
        echo "├ stableoutdated: ──────────────┤ $stableoutdated"
        echo "├ latestbrunchunstableversion: ─┤ $latestbrunchunstableversion"
        echo "├ unstableoutdated: ────────────┤ $unstableoutdated"
        echo "├ toolkitversion: ──────────────┤ $toolkitversion"
        echo "├ latesttoolkit: ───────────────┤ $latesttoolkit"
        echo "├ toolkitoutdated: ─────────────┤ $toolkitoutdated"
        echo "├ updateinprogress: ────────────┤ $updateinprogress"
        echo "└───────────────────────────────┴──────── -"
        exit
        fi
    # Unset updating status if only checking for variables
        if [ "$OPTS" == "--pwa-sharedvars" ] || [ "$OPTS" == "-pwa-sv" ]; then
            updateinprogress="false"
            exit
        fi
}

#####################################################################
# Script Execution
#####################################################################

# Looks for OS first, then calls the main script
checkcurrentos
